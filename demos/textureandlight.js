let positions = new Float32Array([  0.0000,0.0000,-1.0000,0.4253,-0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.7236,-0.5257,-0.4472,0.4253,-0.3090,-0.8507,0.8506,0.0000,-0.5257,0.0000,0.0000,-1.0000,-0.1625,-0.5000,-0.8507,-0.5257,0.0000,-0.8507,0.0000,0.0000,-1.0000,-0.5257,0.0000,-0.8507,-0.1625,0.5000,-0.8507,0.0000,0.0000,-1.0000,-0.1625,0.5000,-0.8507,0.4253,0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.8506,0.0000,-0.5257,0.9511,-0.3090,0.0000,-0.2764,-0.8506,-0.4472,0.2629,-0.8090,-0.5257,0.0000,-1.0000,0.0000,-0.8944,0.0000,-0.4472,-0.6882,-0.5000,-0.5257,-0.9511,-0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.6882,0.5000,-0.5257,-0.5878,0.8090,0.0000,0.7236,0.5257,-0.4472,0.2629,0.8090,-0.5257,0.5878,0.8090,0.0000,0.7236,-0.5257,-0.4472,0.9511,-0.3090,0.0000,0.5878,-0.8090,0.0000,-0.2764,-0.8506,-0.4472,0.0000,-1.0000,0.0000,-0.5878,-0.8090,0.0000,-0.8944,0.0000,-0.4472,-0.9511,-0.3090,0.0000,-0.9511,0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.7236,0.5257,-0.4472,0.5878,0.8090,0.0000,0.9511,0.3090,0.0000,0.2764,-0.8506,0.4472,0.6882,-0.5000,0.5257,0.1625,-0.5000,0.8507,-0.7236,-0.5257,0.4472,-0.2629,-0.8090,0.5257,-0.4253,-0.3090,0.8507,-0.7236,0.5257,0.4472,-0.8506,0.0000,0.5257,-0.4253,0.3090,0.8507,0.2764,0.8506,0.4472,-0.2629,0.8090,0.5257,0.1625,0.5000,0.8507,0.8944,0.0000,0.4472,0.6882,0.5000,0.5257,0.5257,0.0000,0.8507,0.5257,0.0000,0.8507,0.1625,0.5000,0.8507,0.0000,0.0000,1.0000,0.5257,0.0000,0.8507,0.6882,0.5000,0.5257,0.1625,0.5000,0.8507,0.6882,0.5000,0.5257,0.2764,0.8506,0.4472,0.1625,0.5000,0.8507,0.1625,0.5000,0.8507,-0.4253,0.3090,0.8507,0.0000,0.0000,1.0000,0.1625,0.5000,0.8507,-0.2629,0.8090,0.5257,-0.4253,0.3090,0.8507,-0.2629,0.8090,0.5257,-0.7236,0.5257,0.4472,-0.4253,0.3090,0.8507,-0.4253,0.3090,0.8507,-0.4253,-0.3090,0.8507,0.0000,0.0000,1.0000,-0.4253,0.3090,0.8507,-0.8506,0.0000,0.5257,-0.4253,-0.3090,0.8507,-0.8506,0.0000,0.5257,-0.7236,-0.5257,0.4472,-0.4253,-0.3090,0.8507,-0.4253,-0.3090,0.8507,0.1625,-0.5000,0.8507,0.0000,0.0000,1.0000,-0.4253,-0.3090,0.8507,-0.2629,-0.8090,0.5257,0.1625,-0.5000,0.8507,-0.2629,-0.8090,0.5257,0.2764,-0.8506,0.4472,0.1625,-0.5000,0.8507,0.1625,-0.5000,0.8507,0.5257,0.0000,0.8507,0.0000,0.0000,1.0000,0.1625,-0.5000,0.8507,0.6882,-0.5000,0.5257,0.5257,0.0000,0.8507,0.6882,-0.5000,0.5257,0.8944,0.0000,0.4472,0.5257,0.0000,0.8507,0.9511,0.3090,0.0000,0.6882,0.5000,0.5257,0.8944,0.0000,0.4472,0.9511,0.3090,0.0000,0.5878,0.8090,0.0000,0.6882,0.5000,0.5257,0.5878,0.8090,0.0000,0.2764,0.8506,0.4472,0.6882,0.5000,0.5257,0.0000,1.0000,0.0000,-0.2629,0.8090,0.5257,0.2764,0.8506,0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.2629,0.8090,0.5257,-0.5878,0.8090,0.0000,-0.7236,0.5257,0.4472,-0.2629,0.8090,0.5257,-0.9511,0.3090,0.0000,-0.8506,0.0000,0.5257,-0.7236,0.5257,0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.8506,0.0000,0.5257,-0.9511,-0.3090,0.0000,-0.7236,-0.5257,0.4472,-0.8506,0.0000,0.5257,-0.5878,-0.8090,0.0000,-0.2629,-0.8090,0.5257,-0.7236,-0.5257,0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,-0.2629,-0.8090,0.5257,0.0000,-1.0000,0.0000,0.2764,-0.8506,0.4472,-0.2629,-0.8090,0.5257,0.5878,-0.8090,0.0000,0.6882,-0.5000,0.5257,0.2764,-0.8506,0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.6882,-0.5000,0.5257,0.9511,-0.3090,0.0000,0.8944,0.0000,0.4472,0.6882,-0.5000,0.5257,0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.2764,0.8506,0.4472,0.5878,0.8090,0.0000,0.2629,0.8090,-0.5257,0.0000,1.0000,0.0000,0.2629,0.8090,-0.5257,-0.2764,0.8506,-0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.9511,0.3090,0.0000,-0.7236,0.5257,0.4472,-0.5878,0.8090,0.0000,-0.6882,0.5000,-0.5257,-0.9511,0.3090,0.0000,-0.6882,0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.5878,-0.8090,0.0000,-0.7236,-0.5257,0.4472,-0.9511,-0.3090,0.0000,-0.6882,-0.5000,-0.5257,-0.5878,-0.8090,0.0000,-0.6882,-0.5000,-0.5257,-0.2764,-0.8506,-0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,0.5878,-0.8090,0.0000,0.2764,-0.8506,0.4472,0.0000,-1.0000,0.0000,0.2629,-0.8090,-0.5257,0.5878,-0.8090,0.0000,0.2629,-0.8090,-0.5257,0.7236,-0.5257,-0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.9511,0.3090,0.0000,0.8944,0.0000,0.4472,0.9511,-0.3090,0.0000,0.8506,0.0000,-0.5257,0.9511,0.3090,0.0000,0.8506,0.0000,-0.5257,0.7236,0.5257,-0.4472,0.9511,0.3090,0.0000,0.4253,0.3090,-0.8507,0.2629,0.8090,-0.5257,0.7236,0.5257,-0.4472,0.4253,0.3090,-0.8507,-0.1625,0.5000,-0.8507,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.2764,0.8506,-0.4472,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.6882,0.5000,-0.5257,-0.2764,0.8506,-0.4472,-0.1625,0.5000,-0.8507,-0.5257,0.0000,-0.8507,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.8944,0.0000,-0.4472,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.6882,-0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.5257,0.0000,-0.8507,-0.1625,-0.5000,-0.8507,-0.6882,-0.5000,-0.5257,-0.1625,-0.5000,-0.8507,-0.2764,-0.8506,-0.4472,-0.6882,-0.5000,-0.5257,0.8506,0.0000,-0.5257,0.4253,0.3090,-0.8507,0.7236,0.5257,-0.4472,0.8506,0.0000,-0.5257,0.4253,-0.3090,-0.8507,0.4253,0.3090,-0.8507,0.4253,-0.3090,-0.8507,0.0000,0.0000,-1.0000,0.4253,0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.2629,-0.8090,-0.5257,-0.2764,-0.8506,-0.4472,-0.1625,-0.5000,-0.8507,0.4253,-0.3090,-0.8507,0.2629,-0.8090,-0.5257,0.4253,-0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.2629,-0.8090,-0.5257 ]);
let normals = new Float32Array([  0.0000,0.0000,-1.0000,0.4253,-0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.7236,-0.5257,-0.4472,0.4253,-0.3090,-0.8507,0.8506,0.0000,-0.5257,0.0000,0.0000,-1.0000,-0.1625,-0.5000,-0.8507,-0.5257,0.0000,-0.8507,0.0000,0.0000,-1.0000,-0.5257,0.0000,-0.8507,-0.1625,0.5000,-0.8507,0.0000,0.0000,-1.0000,-0.1625,0.5000,-0.8507,0.4253,0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.8506,0.0000,-0.5257,0.9511,-0.3090,0.0000,-0.2764,-0.8506,-0.4472,0.2629,-0.8090,-0.5257,0.0000,-1.0000,0.0000,-0.8944,0.0000,-0.4472,-0.6882,-0.5000,-0.5257,-0.9511,-0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.6882,0.5000,-0.5257,-0.5878,0.8090,0.0000,0.7236,0.5257,-0.4472,0.2629,0.8090,-0.5257,0.5878,0.8090,0.0000,0.7236,-0.5257,-0.4472,0.9511,-0.3090,0.0000,0.5878,-0.8090,0.0000,-0.2764,-0.8506,-0.4472,0.0000,-1.0000,0.0000,-0.5878,-0.8090,0.0000,-0.8944,0.0000,-0.4472,-0.9511,-0.3090,0.0000,-0.9511,0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.7236,0.5257,-0.4472,0.5878,0.8090,0.0000,0.9511,0.3090,0.0000,0.2764,-0.8506,0.4472,0.6882,-0.5000,0.5257,0.1625,-0.5000,0.8507,-0.7236,-0.5257,0.4472,-0.2629,-0.8090,0.5257,-0.4253,-0.3090,0.8507,-0.7236,0.5257,0.4472,-0.8506,0.0000,0.5257,-0.4253,0.3090,0.8507,0.2764,0.8506,0.4472,-0.2629,0.8090,0.5257,0.1625,0.5000,0.8507,0.8944,0.0000,0.4472,0.6882,0.5000,0.5257,0.5257,0.0000,0.8507,0.5257,0.0000,0.8507,0.1625,0.5000,0.8507,0.0000,0.0000,1.0000,0.5257,0.0000,0.8507,0.6882,0.5000,0.5257,0.1625,0.5000,0.8507,0.6882,0.5000,0.5257,0.2764,0.8506,0.4472,0.1625,0.5000,0.8507,0.1625,0.5000,0.8507,-0.4253,0.3090,0.8507,0.0000,0.0000,1.0000,0.1625,0.5000,0.8507,-0.2629,0.8090,0.5257,-0.4253,0.3090,0.8507,-0.2629,0.8090,0.5257,-0.7236,0.5257,0.4472,-0.4253,0.3090,0.8507,-0.4253,0.3090,0.8507,-0.4253,-0.3090,0.8507,0.0000,0.0000,1.0000,-0.4253,0.3090,0.8507,-0.8506,0.0000,0.5257,-0.4253,-0.3090,0.8507,-0.8506,0.0000,0.5257,-0.7236,-0.5257,0.4472,-0.4253,-0.3090,0.8507,-0.4253,-0.3090,0.8507,0.1625,-0.5000,0.8507,0.0000,0.0000,1.0000,-0.4253,-0.3090,0.8507,-0.2629,-0.8090,0.5257,0.1625,-0.5000,0.8507,-0.2629,-0.8090,0.5257,0.2764,-0.8506,0.4472,0.1625,-0.5000,0.8507,0.1625,-0.5000,0.8507,0.5257,0.0000,0.8507,0.0000,0.0000,1.0000,0.1625,-0.5000,0.8507,0.6882,-0.5000,0.5257,0.5257,0.0000,0.8507,0.6882,-0.5000,0.5257,0.8944,0.0000,0.4472,0.5257,0.0000,0.8507,0.9511,0.3090,0.0000,0.6882,0.5000,0.5257,0.8944,0.0000,0.4472,0.9511,0.3090,0.0000,0.5878,0.8090,0.0000,0.6882,0.5000,0.5257,0.5878,0.8090,0.0000,0.2764,0.8506,0.4472,0.6882,0.5000,0.5257,0.0000,1.0000,0.0000,-0.2629,0.8090,0.5257,0.2764,0.8506,0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.2629,0.8090,0.5257,-0.5878,0.8090,0.0000,-0.7236,0.5257,0.4472,-0.2629,0.8090,0.5257,-0.9511,0.3090,0.0000,-0.8506,0.0000,0.5257,-0.7236,0.5257,0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.8506,0.0000,0.5257,-0.9511,-0.3090,0.0000,-0.7236,-0.5257,0.4472,-0.8506,0.0000,0.5257,-0.5878,-0.8090,0.0000,-0.2629,-0.8090,0.5257,-0.7236,-0.5257,0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,-0.2629,-0.8090,0.5257,0.0000,-1.0000,0.0000,0.2764,-0.8506,0.4472,-0.2629,-0.8090,0.5257,0.5878,-0.8090,0.0000,0.6882,-0.5000,0.5257,0.2764,-0.8506,0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.6882,-0.5000,0.5257,0.9511,-0.3090,0.0000,0.8944,0.0000,0.4472,0.6882,-0.5000,0.5257,0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.2764,0.8506,0.4472,0.5878,0.8090,0.0000,0.2629,0.8090,-0.5257,0.0000,1.0000,0.0000,0.2629,0.8090,-0.5257,-0.2764,0.8506,-0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.9511,0.3090,0.0000,-0.7236,0.5257,0.4472,-0.5878,0.8090,0.0000,-0.6882,0.5000,-0.5257,-0.9511,0.3090,0.0000,-0.6882,0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.5878,-0.8090,0.0000,-0.7236,-0.5257,0.4472,-0.9511,-0.3090,0.0000,-0.6882,-0.5000,-0.5257,-0.5878,-0.8090,0.0000,-0.6882,-0.5000,-0.5257,-0.2764,-0.8506,-0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,0.5878,-0.8090,0.0000,0.2764,-0.8506,0.4472,0.0000,-1.0000,0.0000,0.2629,-0.8090,-0.5257,0.5878,-0.8090,0.0000,0.2629,-0.8090,-0.5257,0.7236,-0.5257,-0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.9511,0.3090,0.0000,0.8944,0.0000,0.4472,0.9511,-0.3090,0.0000,0.8506,0.0000,-0.5257,0.9511,0.3090,0.0000,0.8506,0.0000,-0.5257,0.7236,0.5257,-0.4472,0.9511,0.3090,0.0000,0.4253,0.3090,-0.8507,0.2629,0.8090,-0.5257,0.7236,0.5257,-0.4472,0.4253,0.3090,-0.8507,-0.1625,0.5000,-0.8507,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.2764,0.8506,-0.4472,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.6882,0.5000,-0.5257,-0.2764,0.8506,-0.4472,-0.1625,0.5000,-0.8507,-0.5257,0.0000,-0.8507,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.8944,0.0000,-0.4472,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.6882,-0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.5257,0.0000,-0.8507,-0.1625,-0.5000,-0.8507,-0.6882,-0.5000,-0.5257,-0.1625,-0.5000,-0.8507,-0.2764,-0.8506,-0.4472,-0.6882,-0.5000,-0.5257,0.8506,0.0000,-0.5257,0.4253,0.3090,-0.8507,0.7236,0.5257,-0.4472,0.8506,0.0000,-0.5257,0.4253,-0.3090,-0.8507,0.4253,0.3090,-0.8507,0.4253,-0.3090,-0.8507,0.0000,0.0000,-1.0000,0.4253,0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.2629,-0.8090,-0.5257,-0.2764,-0.8506,-0.4472,-0.1625,-0.5000,-0.8507,0.4253,-0.3090,-0.8507,0.2629,-0.8090,-0.5257,0.4253,-0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.2629,-0.8090,-0.5257 ]);
let uvs = new Float32Array([
   -0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297
]);

let triangles = new Uint16Array([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239 ]);

let skyboxPositions = new Float32Array([
    -1.0, 1.0, 1.0,
    1.0, 1.0, 1.0,
    -1.0, -1.0, 1.0,
    1.0, -1.0, 1.0
]);

let skyboxTriangles = new Uint16Array([
    0, 2, 1,
    2, 3, 1
]);

// ******************************************************
// **               Light configuration                **
// ******************************************************

let ambientLightColor = vec3.fromValues(0.05, 0.05, 0.1);
let numberOfLights = 2;
let lightColors = [vec3.fromValues(1.0, 0.0, 0.2), vec3.fromValues(0.0, 1.1, 0.2)];
let lightInitialPositions = [vec3.fromValues(5, 0, 2), vec3.fromValues(-5, 0, 2)];
let lightPositions = [vec3.create(), vec3.create()];


// language=GLSL
let lightCalculationShader = `
    uniform vec3 cameraPosition;
    uniform vec3 ambientLightColor;    
    uniform vec3 lightColors[${numberOfLights}];        
    uniform vec3 lightPositions[${numberOfLights}];
    
    // This function calculates light reflection using Phong reflection model (ambient + diffuse + specular)
        vec4 calculateLights(vec3 normal, vec3 position) {
        vec3 viewDirection = normalize(cameraPosition.xyz - position);
        vec4 color = vec4(ambientLightColor, 1.0);
                
        for (int i = 0; i < lightPositions.length(); i++) {
            vec3 lightDirection = normalize(lightPositions[i] - position);
            
            // Lambertian reflection (ideal diffuse of matte surfaces) is also a part of Phong model                        
            float diffuse = max(dot(lightDirection, normal), 0.0);                                    
                      
            // Phong specular highlight 
            float specular = pow(max(dot(viewDirection, reflect(-lightDirection, normal)), 0.0), 50.0);
            
            // Blinn-Phong improved specular highlight                        
            //float specular = pow(max(dot(normalize(lightDirection + viewDirection), normal), 0.0), 200.0);
            
            color.rgb += lightColors[i] * diffuse + specular;
        }
        return color;
    }
`;


// language=GLSL
let fragmentShader = `
    #version 300 es
    precision highp float;        
    ${lightCalculationShader}  

    uniform sampler2D tex;
    uniform float time;
    
    in vec2 v_uv;    
    in vec3 vPosition;    
    in vec3 vNormal;
    in vec4 vColor;    
    
    out vec4 outColor;        
    
    void main() {                      
        // For Phong shading (per-fragment) move color calculation from vertex to fragment shader
        outColor = calculateLights(normalize(vNormal), vPosition) * (texture(tex, (v_uv) * 1.5 * sin(time * 2.9))
                / texture(tex, (v_uv + 0.5) * 6.0 * log(time * 2.46641)));
        //outColor = vColor;
    }
`;

// language=GLSL
let vertexShader = `
    #version 300 es
    ${lightCalculationShader}
        
    layout(location=0) in vec4 position;
    layout(location=1) in vec4 normal;
    layout(location=2) in vec2 uv;
    
    uniform mat4 modelViewProjectionMatrix;
    uniform mat4 viewProjectionMatrix;
    uniform mat4 modelMatrix;

    
    out vec2 v_uv;
    out vec3 vPosition;    
    out vec3 vNormal;
    out vec4 vColor;
    
    void main() {
        vec4 worldPosition = modelMatrix * position;
        
        vPosition = worldPosition.xyz;        
        vNormal = (modelMatrix * normal).xyz;
        
        // For Gouraud shading (per-vertex) move color calculation from fragment to vertex shader
        vColor = calculateLights(normalize(vNormal), vPosition);
        
        gl_Position = viewProjectionMatrix * worldPosition;
        v_uv = uv;
    }
`;

// language=GLSL
let skyboxFragmentShader = `
    #version 300 es
    precision mediump float;
    
    uniform samplerCube cubemap;
    uniform samplerCube cubemap2;
    uniform mat4 viewProjectionInverse;
    uniform float time;
    in vec4 v_position;
    
    out vec4 outColor;
    
    void main() {
      vec4 t = viewProjectionInverse * v_position;
      outColor = texture(cubemap, normalize(t.xyz / t.w)) - 0.2 * tan(time + 1.0) * texture(cubemap2, normalize(t.xyz / t.w ));
    }
`;

// language=GLSL
let skyboxVertexShader = `
    #version 300 es
    
    layout(location=0) in vec4 position;
    out vec4 v_position;
    
    void main() {
      v_position = position;
      gl_Position = position;
    }
`;

app.depthTest().cullBackfaces();

let program = app.createProgram(vertexShader.trim(), fragmentShader.trim());
let skyboxProgram = app.createProgram(skyboxVertexShader.trim(), skyboxFragmentShader.trim());

let vertexArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, positions))
    .vertexAttributeBuffer(1, app.createVertexBuffer(PicoGL.FLOAT, 3, normals))
    .vertexAttributeBuffer(2, app.createVertexBuffer(PicoGL.FLOAT, 2, uvs))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, triangles));

let skyboxArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, skyboxPositions))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, skyboxTriangles));

let projectionMatrix = mat4.create();
let projMatrix = mat4.create();
let viewMatrix = mat4.create();
let viewProjMatrix = mat4.create();
let viewProjectionMatrix = mat4.create();
let modelMatrix = mat4.create();
let modelViewMatrix = mat4.create();
let modelViewProjectionMatrix = mat4.create();
let rotateXMatrix = mat4.create();
let rotateYMatrix = mat4.create();
let skyboxViewProjectionInverse = mat4.create();

loadImages(["images/tigertex.jpg", "images/Knuckles.jpg", "images/doyoknodawaelapis.jpg"], function (images) {
let drawCall = app.createDrawCall(program, vertexArray)
    .texture("tex", app.createTexture2D(images[2], images[2].width, images[2].height, {flipY: true, magFilter: PicoGL.ANISOTROPIC, wrapT: PicoGL.REPEAT, wrapS: PicoGL.MIRRORED_REPEAT}))

    .uniform("ambientLightColor", ambientLightColor);
    
let skyboxDrawCall = app.createDrawCall(skyboxProgram, skyboxArray)
        .texture("cubemap", app.createCubemap({cross: images[1]}))
        
        .texture("cubemap2", app.createCubemap({
            negX: images[2],
            posX: images[2],
            negY: images[2],
            posY: images[2],
            negZ: images[2],
            posZ: images[2]
        }));

let startTime = new Date().getTime() / 1000;

let cameraPosition = vec3.fromValues(0, 0, 5);
mat4.fromXRotation(modelMatrix, -Math.PI / 2);


function draw() {
    let time = new Date().getTime() / 1000 - startTime;

    mat4.perspective(projectionMatrix, Math.PI / 4, app.width / app.height, 0.1, 100.0);
    let camPos = vec3.rotateY(vec3.create(), vec3.fromValues(2, -1, 4), vec3.fromValues(0, 0, 0), time * 0.55);
    mat4.lookAt(viewMatrix, camPos, vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));
    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);
    mat4.fromXRotation(rotateXMatrix, time * 0.7000);
    mat4.fromYRotation(rotateYMatrix, time * 1.1000);
    mat4.multiply(modelMatrix, rotateXMatrix, rotateYMatrix);
    
    mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);
    mat4.multiply(modelViewProjectionMatrix, viewProjMatrix, modelMatrix);

    let skyboxView = mat4.clone(viewMatrix);
    mat4.setTranslation(skyboxView, vec3.fromValues(0, 0, 0));
    let skyboxViewProjectionMatrix = mat4.create();
    mat4.mul(skyboxViewProjectionMatrix, projMatrix, skyboxView);
    mat4.invert(skyboxViewProjectionInverse, skyboxViewProjectionMatrix);

    app.clear();

    app.noDepthTest();
    skyboxDrawCall.uniform("time", time);
    skyboxDrawCall.uniform("viewProjectionInverse", skyboxViewProjectionInverse);
    skyboxDrawCall.draw();

    app.depthTest();


    for (let i = 0; i < lightInitialPositions.length; i++)
        vec3.rotateZ(lightPositions[i], lightInitialPositions[i], vec3.zero, time * 1.5);
    
    drawCall.uniform("time", time);
    //drawCall.uniform("modelViewProjectionMatrix", modelViewProjectionMatrix);
    drawCall.uniform("viewProjectionMatrix", viewProjectionMatrix);
    drawCall.uniform("modelMatrix", modelMatrix);
    drawCall.uniform("cameraPosition", cameraPosition);
    drawCall.uniform("lightPositions", toUniformArray(lightPositions));
    drawCall.uniform("lightColors", toUniformArray(lightColors));

    //app.clear();
    drawCall.draw();

    requestAnimationFrame(draw);
}
requestAnimationFrame(draw);
});