// This demo demonstrates simple cubemap reflections and more complex planar reflections
// Home task: implement fresnel effect for both types of reflections


// comet ball

let positions = new Float32Array([

    0.0122,0.2035,0.9893,0.0192,0.2988,0.9373,0.0469,0.5080,0.8133,-0.0449,0.7660,0.6991,-0.0506,0.8711,0.5204,-0.0500,0.8981,0.4363,-0.0380,0.9916,0.1354,-0.0085,1.0069,0.0010,0.0152,0.9641,-0.1429,-0.0009,0.5701,-0.8388,0.0606,0.1025,0.9689,0.0812,0.3728,0.9132,0.1070,0.5461,0.8297,0.1490,0.6827,0.7080,0.1474,0.8505,0.5352,0.1865,0.8589,0.3222,0.1957,0.9038,0.1554,0.2307,0.9640,0.0123,0.1485,0.9801,-0.1763,0.1398,0.8616,-0.3734,0.1911,0.8496,-0.5433,0.0742,0.7157,-0.7754,0.0997,0.5556,-0.8021,0.0977,0.3686,-0.9556,0.1028,0.1187,-0.9658,0.0696,0.1732,0.9930,0.1490,0.3530,0.9297,0.1565,0.4863,0.8794,0.2612,0.6481,0.7332,0.3557,0.7486,0.5447,0.3531,0.8512,0.3842,0.3387,0.8606,0.1863,0.4184,0.9363,-0.0644,0.4265,0.9550,-0.1636,0.3475,0.8388,-0.4085,0.3293,0.7987,-0.5388,0.2762,0.6434,-0.7176,0.1621,0.5044,-0.8516,0.1419,0.3183,-0.9487,0.0745,0.1803,-0.9808,0.1640,0.2198,1.0301,0.2134,0.3170,0.9239,0.3394,0.4237,0.7618,0.4560,0.6335,0.7195,0.5223,0.6521,0.5965,0.5451,0.7604,0.4221,0.4957,0.8435,0.1921,0.5193,0.8098,0.0495,0.5455,0.8164,-0.1729,0.5767,0.7627,-0.3546,0.4963,0.6402,-0.5355,0.3815,0.6082,-0.6430,0.3469,0.4176,-0.8860,0.2717,0.3112,-0.9335,0.1101,0.2489,-0.9870,0.1327,0.0768,1.0388,0.2734,0.2577,0.9233,0.3466,0.4098,0.8383,0.4970,0.5015,0.7059,0.5729,0.5585,0.5076,0.6516,0.6034,0.3516,0.7521,0.7231,0.2649,0.7596,0.7077,-0.0127,0.7255,0.6978,-0.2591,0.7198,0.6225,-0.3631,0.5457,0.6216,-0.5650,0.5046,0.5176,-0.7147,0.4243,0.4429,-0.8471,0.2855,0.3041,-0.8960,0.1831,0.1937,-0.9841,0.2008,0.1466,0.9482,0.3197,0.1596,0.8548,0.4953,0.3265,0.8358,0.5969,0.3574,0.7166,0.6610,0.4517,0.5829,0.7626,0.5859,0.3811,0.7658,0.5476,0.1941,0.8015,0.5909,0.0712,0.7743,0.5110,-0.1837,0.7767,0.5525,-0.3645,0.7073,0.3932,-0.5852,0.5929,0.3907,-0.6999,0.5477,0.3470,-0.8085,0.3279,0.2175,-0.9209,0.1262,0.0778,-1.0104,0.0976,0.0331,0.9942,0.3562,0.1766,0.8887,0.5783,0.1377,0.8429,0.6643,0.2476,0.7203,0.8048,0.3493,0.5647,0.8415,0.3454,0.3890,0.9278,0.4600,0.1829,0.9272,0.3992,0.0068,0.8841,0.3763,-0.2097,0.8559,0.3801,-0.3856,0.7681,0.2899,-0.5466,0.6574,0.2022,-0.7175,0.4889,0.1827,-0.8415,0.3356,0.1198,-0.8813,0.1888,0.0909,-1.0720,0.1670,-0.0107,1.0150,0.4279,0.0344,0.9632,0.5277,0.0964,0.8374,0.7476,0.1638,0.6903,0.7914,0.1647,0.5486,0.9094,0.2258,0.3615,0.9429,0.1560,0.2478,0.9779,0.1937,0.0029,0.9561,0.1923,-0.2125,0.8738,0.1533,-0.4201,0.8725,0.1463,-0.5804,0.7605,0.1688,-0.6863,0.5338,0.1098,-0.8248,0.3464,0.0394,-0.9789,0.1990,0.0026,-0.9643,0.2070,-0.0614,0.9481,0.3932,0.0059,0.9179,0.5432,-0.0115,0.8185,0.6521,-0.0249,0.7131,0.8363,-0.0044,0.5448,0.9177,0.0139,0.3847,0.9687,-0.0242,0.1754,1.0006,-0.0015,-0.0036,0.9758,0.0032,-0.1924,0.9661,0.0008,-0.3046,0.8483,-0.0009,-0.5248,0.7178,0.0018,-0.6729,0.5328,0.0093,-0.8079,0.4381,0.0422,-0.9139,0.1889,-0.0142,-0.9902,0.2713,-0.0955,0.9835,0.3364,-0.0491,0.9215,0.5744,-0.0700,0.7731,0.6333,-0.1495,0.6736,0.8115,-0.1597,0.5509,0.9141,-0.1794,0.3850,0.9745,-0.1713,0.1989,0.9893,-0.1838,-0.0224,0.9559,-0.1901,-0.2013,0.8388,-0.2061,-0.3859,0.8080,-0.1362,-0.5972,0.7175,-0.1238,-0.7171,0.5511,-0.1034,-0.8374,0.3813,-0.0860,-0.9123,0.1006,-0.0214,-0.9742,0.1880,-0.1443,0.9820,0.3068,-0.2326,0.9167,0.5144,-0.2756,0.8945,0.6655,-0.3091,0.6479,0.7438,-0.2900,0.5524,0.9247,-0.3265,0.3978,0.8994,-0.3854,0.1966,0.9274,-0.3879,0.0003,0.9075,-0.3763,-0.2108,0.8701,-0.3571,-0.3963,0.7050,-0.3572,-0.5212,0.6594,-0.2139,-0.6698,0.5227,-0.2315,-0.8370,0.3649,-0.1354,-0.9202,0.1774,-0.0750,-1.0243,0.2041,-0.0997,0.9981,0.3106,-0.1728,0.9242,0.3960,-0.2389,0.8044,0.5487,-0.4272,0.6275,0.7661,-0.4756,0.5327,0.7722,-0.5309,0.3801,0.8160,-0.5332,0.1959,0.8524,-0.5087,0.0342,0.8059,-0.5227,-0.1525,0.7531,-0.4977,-0.4114,0.7458,-0.4664,-0.4853,0.5949,-0.3959,-0.7146,0.4581,-0.2572,-0.7725,0.3110,-0.2023,-0.9229,0.1255,-0.1024,-0.9908,0.1009,-0.1370,1.0437,0.2648,-0.2522,0.9671,0.3675,-0.3698,0.8603,0.4632,-0.5587,0.6850,0.6155,-0.6645,0.5840,0.5677,-0.6410,0.3497,0.7466,-0.7122,0.1866,0.7039,-0.6989,-0.0013,0.6283,-0.7082,-0.2155,0.6623,-0.6576,-0.3773,0.5943,-0.5870,-0.5432,0.5257,-0.4806,-0.7312,0.3895,-0.3916,-0.8321,0.2931,-0.3260,-0.9569,0.1285,-0.1386,-0.9779,0.0842,-0.1891,0.9463,0.2193,-0.3240,0.9177,0.3262,-0.4827,0.7367,0.3854,-0.5914,0.6983,0.4533,-0.6938,0.5651,0.4758,-0.7509,0.3665,0.5313,-0.8904,0.2546,0.5876,-0.8031,0.0729,0.5118,-0.7844,-0.2052,0.5010,-0.7803,-0.4012,0.4004,-0.6982,-0.5569,0.3303,-0.5564,-0.7417,0.3161,-0.4672,-0.8372,0.2217,-0.3625,-0.8875,0.1701,-0.1886,-1.0030,0.0095,-0.0159,-0.9908,0.0576,-0.1529,0.9689,0.1990,-0.3483,0.9297,0.2123,-0.4678,0.8314,0.2368,-0.6812,0.6809,0.3032,-0.7752,0.5802,0.3719,-0.8304,0.3818,0.3951,-0.9451,0.1478,0.4102,-0.8816,-0.0097,0.3615,-0.9764,-0.1977,0.2913,-0.8428,-0.3250,0.3437,-0.7245,-0.6316,0.3190,-0.6837,-0.6708,0.1948,-0.4891,-0.8009,0.0913,-0.3494,-0.9617,0.0599,-0.1673,-0.9844,0.0472,-0.2758,0.9617,0.1202,-0.4060,0.9097,0.1571,-0.6040,0.7947,0.1817,-0.6232,0.7580,0.1554,-0.7987,0.5563,0.1028,-0.9492,0.4255,0.2026,-0.9221,0.1881,0.2566,-0.9784,0.0731,0.1964,-0.9673,-0.1984,0.0981,-0.8615,-0.3549,0.2429,-0.8180,-0.5878,0.1413,-0.6994,-0.7105,0.1062,-0.5430,-0.8297,0.0698,-0.3665,-0.9446,-0.0314,-0.2400,-0.9325,-0.0545,-0.2215,0.9947,-0.0260,-0.3633,0.9315,-0.0159,-0.5419,0.7610,0.0561,-0.7293,0.7192,0.0262,-0.8861,0.6061,0.0243,-0.9754,0.3592,-0.0029,-0.9825,0.1924,-0.0176,-1.0004,-0.0022,-0.0197,-0.9339,-0.1985,-0.0127,-0.9175,-0.3744,0.0110,-0.8713,-0.5157,-0.0057,-0.7102,-0.6965,0.0068,-0.5141,-0.8173,0.0031,-0.3806,-0.9252,-0.0377,-0.2027,-0.9663,-0.0340,-0.1881,0.9851,-0.0633,-0.3602,0.9484,-0.0965,-0.5431,0.8427,-0.2224,-0.7442,0.7192,-0.1425,-0.8215,0.5330,-0.1866,-0.9076,0.3753,-0.2165,-0.9420,0.1731,-0.2024,-0.9828,0.0180,-0.1612,-1.0217,-0.2185,-0.1364,-0.8959,-0.3530,-0.2369,-0.7939,-0.5030,-0.0809,-0.6708,-0.7762,-0.0457,-0.5920,-0.8748,-0.0830,-0.3799,-0.9603,-0.0665,-0.1840,-1.0337,-0.0269,-0.1190,0.9700,-0.1474,-0.3648,0.9410,-0.1998,-0.4943,0.8210,-0.2410,-0.5902,0.7733,-0.2864,-0.7134,0.5317,-0.3850,-0.9208,0.4107,-0.3839,-0.9252,0.1817,-0.3655,-0.9483,-0.0083,-0.3210,-0.8555,-0.1509,-0.3470,-0.8518,-0.3613,-0.3675,-0.7341,-0.5532,-0.2889,-0.6551,-0.7003,-0.2146,-0.4353,-0.8364,-0.1551,-0.3613,-0.9207,-0.0752,-0.1454,-1.0213,-0.1084,-0.1594,0.9801,-0.1955,-0.3156,0.8655,-0.3092,-0.4746,0.8557,-0.3485,-0.5951,0.6824,-0.4146,-0.6765,0.6001,-0.5437,-0.7277,0.3645,-0.5363,-0.8173,0.1876,-0.5927,-0.9034,0.0187,-0.5448,-0.8154,-0.1937,-0.5133,-0.7721,-0.3832,-0.3890,-0.6736,-0.5372,-0.3999,-0.5820,-0.7231,-0.3044,-0.4631,-0.7731,-0.2222,-0.3123,-0.9136,-0.1047,-0.1647,-0.9851,-0.0030,0.0692,0.9925,-0.1396,-0.1562,0.9747,-0.2730,-0.2457,0.9481,-0.3977,-0.4318,0.7837,-0.5061,-0.5006,0.6910,-0.5977,-0.5755,0.5608,-0.6065,-0.6619,0.3855,-0.6595,-0.7667,0.1583,-0.7159,-0.7282,-0.0225,-0.6942,-0.7314,-0.2572,-0.6646,-0.6547,-0.3453,-0.6279,-0.5825,-0.5554,-0.5073,-0.5531,-0.6512,-0.4719,-0.3759,-0.8281,-0.3026,-0.2620,-0.9032,-0.0746,-0.1641,-1.0326,-0.1430,-0.0692,0.9680,-0.3295,-0.2179,0.9161,-0.4907,-0.2783,0.8576,-0.5997,-0.4632,0.7455,-0.7477,-0.4176,0.4993,-0.7649,-0.5075,0.3749,-0.7820,-0.6105,0.1377,-0.7755,-0.5963,-0.0605,-0.8125,-0.5398,-0.2151,-0.7550,-0.5258,-0.3753,-0.6921,-0.4686,-0.5607,-0.5643,-0.4681,-0.6787,-0.4652,-0.3083,-0.8297,-0.3151,-0.2838,-0.8824,-0.1785,-0.0940,-0.9915,-0.1668,-0.1367,1.0034,-0.3288,-0.1310,0.9387,-0.5302,-0.2186,0.8269,-0.7023,-0.2541,0.7263,-0.7137,-0.3284,0.5399,-0.8146,-0.3474,0.4262,-0.9052,-0.3721,0.1970,-0.9437,-0.4105,-0.0105,-0.8343,-0.3813,-0.2446,-0.8754,-0.3329,-0.4567,-0.8532,-0.3702,-0.5616,-0.6531,-0.2703,-0.7054,-0.5098,-0.2127,-0.8350,-0.3561,-0.1651,-0.9153,-0.1786,-0.0564,-1.0101,-0.2351,-0.0725,0.9123,-0.3985,-0.0490,0.9109,-0.5481,-0.1059,0.8215,-0.7323,-0.1469,0.7725,-0.8027,-0.1507,0.5054,-0.8973,-0.1562,0.3482,-0.9294,-0.2203,0.1800,-1.0182,-0.2148,0.0063,-0.9413,-0.1620,-0.2054,-0.9059,-0.1799,-0.3803,-0.8252,-0.1680,-0.5515,-0.7343,-0.0838,-0.7337,-0.5604,-0.0669,-0.8406,-0.3561,-0.0617,-0.8939,-0.1909,0.0062,-1.0542,-0.2105,-0.0091,0.9852,-0.3991,-0.0133,0.9221,-0.5922,0.0241,0.7491,-0.7126,-0.0494,0.7035,-0.7578,0.0346,0.5923,-0.8756,0.0175,0.3839,-0.9925,0.0444,0.1355,-1.0429,0.0448,0.0666,-0.9785,0.0007,-0.1940,-0.9076,-0.0219,-0.3311,-0.8161,-0.0416,-0.5495,-0.7618,-0.0111,-0.7337,-0.5490,-0.0415,-0.8970,-0.3929,0.0161,-0.9081,-0.1998,0.0040,-0.9859,-0.1921,0.0785,1.0236,-0.3938,0.0651,0.9155,-0.5495,0.1929,0.8719,-0.6961,0.1377,0.7153,-0.8369,0.1899,0.5529,-0.9520,0.1323,0.3384,-0.9743,0.2018,0.1941,-0.9911,0.1634,0.0041,-0.9111,0.1940,-0.2523,-0.9107,0.2388,-0.3463,-0.8137,0.1492,-0.5603,-0.7028,0.1275,-0.6890,-0.5807,0.1495,-0.8490,-0.3940,0.1072,-0.9840,-0.1921,0.0457,-0.9938,-0.1695,0.0377,0.9608,-0.3636,0.1442,0.8887,-0.5184,0.2094,0.8359,-0.6545,0.2714,0.7303,-0.7194,0.2577,0.5633,-0.8568,0.3503,0.3865,-0.9100,0.3762,0.1947,-0.9311,0.3989,0.0165,-0.8515,0.3435,-0.1779,-0.7953,0.3251,-0.3804,-0.8387,0.3115,-0.5487,-0.6312,0.3110,-0.7187,-0.5371,0.2290,-0.8705,-0.3407,0.1860,-0.9158,-0.2157,0.0948,-0.9750,-0.1971,0.0434,0.9313,-0.2402,0.1981,0.9377,-0.4918,0.2841,0.8638,-0.6219,0.3554,0.6600,-0.7449,0.3866,0.5259,-0.7230,0.5281,0.3587,-0.8965,0.5190,0.1592,-0.8517,0.5661,-0.0298,-0.8263,0.4990,-0.1783,-0.7455,0.4947,-0.4066,-0.6441,0.4156,-0.6185,-0.5777,0.3931,-0.7100,-0.4153,0.2414,-0.7978,-0.2900,0.2124,-0.9112,-0.1272,0.0823,-0.9826,-0.0876,0.1674,0.9868,-0.2240,0.3532,0.8968,-0.3685,0.3915,0.8472,-0.5204,0.4515,0.6978,-0.5605,0.5474,0.5695,-0.6831,0.6967,0.4503,-0.6799,0.7699,0.2089,-0.7514,0.7142,-0.0283,-0.6936,0.6938,-0.1952,-0.6969,0.6297,-0.3851,-0.6083,0.6667,-0.5872,-0.4969,0.5076,-0.7076,-0.4059,0.3703,-0.7839,-0.2717,0.2060,-0.9737,-0.0640,0.1322,-1.0362,-0.0980,0.1277,0.9671,-0.2086,0.3395,0.9226,-0.2823,0.5060,0.8554,-0.3973,0.5156,0.6646,-0.5051,0.6692,0.5572,-0.5079,0.6904,0.4250,-0.5799,0.9022,0.1901,-0.5795,0.8516,0.0718,-0.5777,0.8460,-0.1770,-0.5152,0.7666,-0.3850,-0.4695,0.6875,-0.5762,-0.3783,0.5676,-0.6390,-0.3899,0.4917,-0.8159,-0.1769,0.3166,-0.8516,-0.1050,0.1591,-0.9786,-0.0139,0.1530,0.9798,-0.1527,0.3553,0.9052,-0.2077,0.5162,0.8354,-0.2690,0.6043,0.7347,-0.3667,0.8363,0.5016,-0.3381,0.8319,0.3894,-0.3238,0.8334,0.1901,-0.3783,0.8967,-0.0071,-0.4256,0.8799,-0.2048,-0.3540,0.8539,-0.3831,-0.3374,0.7493,-0.5706,-0.2156,0.6686,-0.7251,-0.2206,0.5448,-0.8744,-0.1454,0.3499,-0.8992,-0.1706,0.1976,-0.9960,-0.0351,0.1754,0.9773,-0.0412,0.3729,0.8793,-0.1354,0.4834,0.8002,-0.1731,0.7133,0.7014,-0.1601,0.8088,0.5520,-0.1923,0.9617,0.3599,-0.1772,0.9458,0.1830,-0.1298,1.0105,0.0156,-0.2693,0.9761,-0.2393,-0.1861,0.9143,-0.3634,-0.1758,0.8211,-0.5778,-0.2131,0.7402,-0.7198,-0.1048,0.5580,-0.8190,-0.1179,0.3601,-0.9446,0.0001,0.2370,-1.0573,-0.0738,0.9098,-0.3589,0.0704,0.8340,-0.6168,-0.0416,0.6805,-0.7460,-0.0100,0.3969,-0.9202,-0.0398,0.1827,-0.9708
]);

let normals = new Float32Array([

    0.0358,0.2645,0.9637,-0.0329,0.3919,0.9194,-0.1876,0.4774,0.8584,-0.0771,0.6828,0.7265,-0.0047,0.8889,0.4581,0.0858,0.9442,0.3180,0.1014,0.9623,0.2523,0.0861,0.9951,0.0482,0.0685,0.9677,-0.2425,-0.0047,0.4897,-0.8719,-0.3453,0.7304,0.5893,-0.3236,0.4219,0.8469,-0.0807,0.5611,0.8238,0.1224,0.6819,0.7211,0.2016,0.8873,0.4148,0.2079,0.9522,0.2239,0.2317,0.9297,0.2860,0.1832,0.9608,0.2079,0.0684,0.9660,-0.2491,0.0988,0.9489,-0.2998,0.2051,0.9125,-0.3538,0.0993,0.6197,-0.7785,0.1390,0.4597,-0.8771,0.0025,0.3865,-0.9223,-0.6418,0.3745,-0.6691,-0.5513,0.4163,0.7230,-0.0800,0.4693,0.8794,0.1226,0.4408,0.8892,0.2426,0.6177,0.7480,0.2506,0.8383,0.4841,0.2314,0.9330,0.2757,0.2500,0.9421,0.2232,0.4325,0.8844,0.1752,0.4050,0.9020,-0.1497,0.3203,0.8599,-0.3974,0.4108,0.7612,-0.5018,0.3759,0.5907,-0.7139,0.2146,0.5181,-0.8280,-0.1745,0.4213,-0.8900,-0.6485,0.2574,-0.7163,0.1936,0.3501,0.9165,0.2720,0.4950,0.8252,0.2496,0.4077,0.8783,0.4660,0.5556,0.6886,0.6852,0.5322,0.4972,0.5274,0.7152,0.4585,0.3942,0.9021,0.1753,0.4801,0.8754,0.0563,0.5717,0.8094,-0.1338,0.5119,0.7489,-0.4208,0.4186,0.7082,-0.5686,0.3815,0.6610,-0.6461,0.4433,0.2652,-0.8562,0.3331,0.1651,-0.9283,0.0159,0.2949,-0.9554,0.2117,-0.6891,0.6930,0.5104,0.1166,0.8520,0.2055,0.4741,0.8561,0.5370,0.4713,0.6996,0.6765,0.5336,0.5075,0.6028,0.6174,0.5054,0.7205,0.6352,0.2780,0.7974,0.6004,-0.0605,0.7479,0.6420,-0.1688,0.7258,0.5806,-0.3689,0.4675,0.6744,-0.5715,0.4546,0.6520,-0.6068,0.3710,0.5128,-0.7742,0.4611,0.0153,-0.8872,0.2770,0.1246,-0.9527,0.5839,-0.0101,0.8117,0.3665,0.1896,0.9109,0.4213,0.3399,0.8408,0.5584,0.4861,0.6722,0.5665,0.5980,0.5669,0.6601,0.6074,0.4418,0.8465,0.4893,0.2096,0.9044,0.4263,-0.0198,0.8844,0.4489,-0.1281,0.8332,0.4684,-0.2939,0.7093,0.3781,-0.5949,0.6927,0.3597,-0.6250,0.6066,0.2270,-0.7619,0.3740,0.1778,-0.9102,-0.3338,0.5528,-0.7635,0.1662,0.5447,0.8220,0.1687,0.4033,0.8993,0.5345,0.1812,0.8255,0.6767,0.2380,0.6966,0.7856,0.3218,0.5284,0.8637,0.3193,0.3899,0.8686,0.4637,0.1747,0.9006,0.4265,-0.0838,0.8907,0.4197,-0.1749,0.8740,0.3725,-0.3120,0.7478,0.4018,-0.5285,0.6055,0.3081,-0.7337,0.4603,0.1898,-0.8672,0.3864,0.2945,-0.8740,0.3065,0.1014,-0.9464,-0.1018,-0.3540,0.9297,0.4524,-0.0740,0.8887,0.5921,-0.0062,0.8058,0.7695,-0.0143,0.6384,0.8490,0.0694,0.5239,0.9116,0.1450,0.3846,0.9699,0.1094,0.2173,0.9869,0.1610,-0.0088,0.9535,0.2095,-0.2166,0.9293,0.1968,-0.3125,0.8300,0.1415,-0.5394,0.6316,0.2179,-0.7440,0.5249,0.1607,-0.8358,0.4006,-0.2009,-0.8939,0.3141,-0.2879,-0.9047,0.6389,0.1936,0.7445,0.4620,-0.5027,0.7306,0.5818,-0.3129,0.7507,0.6723,-0.1845,0.7168,0.8066,-0.0411,0.5896,0.9212,0.0466,0.3863,0.9811,0.0376,0.1896,0.9995,0.0303,0.0074,0.9728,-0.0034,-0.2316,0.9400,-0.0545,-0.3366,0.8741,-0.1227,-0.4698,0.6720,-0.0098,-0.7405,0.5989,0.0250,-0.8004,0.5644,-0.0954,-0.8199,0.1951,-0.0211,-0.9805,0.3593,0.0755,0.9301,0.3387,0.1188,0.9333,0.6745,-0.1297,0.7268,0.7436,-0.0917,0.6623,0.7273,-0.1285,0.6741,0.9143,-0.0868,0.3955,0.9810,-0.1129,0.1579,0.9853,-0.1690,-0.0251,0.9507,-0.1674,-0.2610,0.8852,-0.2002,-0.4199,0.7941,-0.2093,-0.5706,0.6823,-0.1252,-0.7202,0.5726,-0.0468,-0.8185,0.4241,0.0244,-0.9052,0.2353,-0.1321,-0.9629,0.4005,0.9157,-0.0332,0.0136,-0.7728,0.6344,0.4069,-0.4604,0.7889,0.5725,-0.3355,0.7481,0.6613,-0.2043,0.7217,0.8815,-0.2856,0.3759,0.9054,-0.4071,0.1203,0.9061,-0.4229,-0.0140,0.8926,-0.3880,-0.2296,0.8462,-0.3086,-0.4345,0.8057,-0.2099,-0.5538,0.6489,-0.3942,-0.6507,0.4449,-0.4111,-0.7956,0.3597,-0.1653,-0.9183,0.2430,0.0854,-0.9662,0.7564,0.6509,0.0646,0.9435,-0.2911,0.1583,0.4339,-0.7195,0.5422,0.5123,-0.3076,0.8018,0.6956,-0.4118,0.5886,0.7321,-0.6164,0.2900,0.8089,-0.5623,0.1716,0.8376,-0.5442,-0.0466,0.7803,-0.6011,-0.1725,0.7540,-0.5312,-0.3864,0.7345,-0.3708,-0.5683,0.6630,-0.2543,-0.7040,0.4981,-0.3108,-0.8095,0.3956,-0.2734,-0.8768,-0.1106,-0.3514,-0.9297,-0.2602,-0.2001,0.9446,0.3093,-0.3684,0.8767,0.4925,-0.3893,0.7783,0.3544,-0.4135,0.8387,0.5538,-0.6539,0.5155,0.6101,-0.6943,0.3816,0.7267,-0.6537,0.2111,0.7054,-0.6883,-0.1691,0.6616,-0.7350,-0.1487,0.6765,-0.6713,-0.3026,0.5586,-0.6124,-0.5594,0.5079,-0.4503,-0.7343,0.4810,-0.3153,-0.8180,0.3241,-0.2861,-0.9017,0.5108,0.3357,-0.7915,0.1350,-0.1381,0.9812,0.2936,-0.4519,0.8424,0.2063,-0.5298,0.8226,0.2111,-0.5720,0.7926,0.3976,-0.7794,0.4841,0.4848,-0.7290,0.4831,0.4931,-0.7903,0.3635,0.5718,-0.7990,-0.1859,0.5668,-0.8009,-0.1930,0.4653,-0.7907,-0.3977,0.4359,-0.7244,-0.5341,0.2638,-0.6099,-0.7473,0.1897,-0.5908,-0.7841,0.1003,-0.5284,-0.8430,0.0342,-0.2947,-0.9550,0.0315,-0.0148,-0.9994,0.4306,0.0204,0.9023,0.4583,-0.2095,0.8637,0.4566,-0.4539,0.7652,0.2303,-0.6389,0.7339,0.3157,-0.7493,0.5821,0.3297,-0.8404,0.4300,0.3327,-0.9401,0.0745,0.4748,-0.8787,-0.0480,0.3808,-0.8918,-0.2440,0.2879,-0.8467,-0.4474,0.4808,-0.6466,-0.5922,0.4675,-0.4833,-0.7401,0.2310,-0.5356,-0.8122,0.0152,-0.3673,-0.9300,-0.2158,-0.1864,-0.9585,0.1180,-0.2449,0.9623,0.0783,-0.4666,0.8810,0.1316,-0.5060,0.8524,0.3357,-0.5260,0.7814,0.3331,-0.7565,0.5628,0.3369,-0.8799,0.3349,0.2134,-0.9628,0.1657,0.1744,-0.9825,0.0648,0.1087,-0.9392,-0.3255,0.2072,-0.9321,-0.2971,0.2367,-0.8656,-0.4411,0.0920,-0.6071,-0.7892,0.1053,-0.5405,-0.8347,0.0322,-0.3886,-0.9208,0.0078,-0.1302,-0.9915,-0.0392,-0.2286,0.9727,0.1032,-0.4832,0.8694,0.0836,-0.5186,0.8509,0.1836,-0.6254,0.7584,0.0809,-0.8331,0.5471,0.0291,-0.9783,0.2051,-0.0035,-0.9889,0.1484,0.0474,-0.9984,0.0305,0.1322,-0.9606,-0.2443,0.0596,-0.9448,-0.3223,-0.0118,-0.9131,-0.4074,-0.0044,-0.7385,-0.6742,0.2618,-0.5479,-0.7945,0.3240,-0.3290,-0.8870,0.7526,-0.2320,-0.6161,-0.9429,-0.0046,0.3330,-0.0887,-0.3562,0.9302,0.0902,-0.4902,0.8669,-0.4715,-0.6471,0.5991,-0.3394,-0.7728,0.5362,-0.1845,-0.9094,0.3728,-0.1326,-0.9810,0.1415,-0.1852,-0.9825,0.0198,-0.1459,-0.9565,-0.2524,-0.1906,-0.8995,-0.3930,-0.2029,-0.8455,-0.4940,0.0365,-0.6979,-0.7152,0.1794,-0.5376,-0.8239,-0.0116,-0.3428,-0.9393,0.0833,-0.2120,-0.9737,-0.6466,-0.0103,0.7627,-0.3389,-0.2621,0.9036,-0.2896,-0.4361,0.8520,-0.3543,-0.5591,0.7495,-0.4408,-0.6861,0.5787,-0.3458,-0.8246,0.4476,-0.3096,-0.9319,0.1890,-0.3068,-0.9467,-0.0983,-0.3758,-0.8773,-0.2984,-0.3482,-0.8650,-0.3613,-0.4055,-0.7499,-0.5226,-0.3904,-0.6439,-0.6580,-0.4297,-0.4516,-0.7819,-0.5102,-0.3351,-0.7920,-0.5104,0.3062,-0.8036,-0.1831,-0.1628,0.9695,-0.2288,-0.3092,0.9230,-0.2968,-0.4553,0.8394,-0.3062,-0.6879,0.6580,-0.3713,-0.6811,0.6309,-0.5436,-0.7230,0.4264,-0.5680,-0.7686,0.2943,-0.4946,-0.8691,0.0009,-0.3996,-0.8610,-0.3146,-0.4207,-0.8017,-0.4245,-0.4864,-0.7100,-0.5092,-0.3639,-0.5784,-0.7300,-0.2531,-0.4554,-0.8535,-0.2581,-0.4758,-0.8408,-0.2273,-0.4510,-0.8631,-0.1153,0.0370,0.9926,-0.1114,-0.1925,0.9749,-0.1837,-0.2718,0.9446,-0.2825,-0.5263,0.8020,-0.3806,-0.6316,0.6755,-0.5683,-0.6671,0.4816,-0.6090,-0.6787,0.4103,-0.6920,-0.6536,0.3062,-0.7875,-0.6162,-0.0067,-0.6862,-0.6569,-0.3124,-0.6266,-0.6320,-0.4559,-0.5667,-0.6219,-0.5404,-0.4426,-0.6242,-0.6438,-0.4817,-0.3427,-0.8065,-0.3229,-0.3065,-0.8954,0.2381,-0.3943,-0.8876,0.2966,-0.6177,0.7283,-0.2887,-0.3081,0.9065,-0.3713,-0.2654,0.8897,-0.5327,-0.5127,0.6733,-0.7952,-0.3980,0.4574,-0.7711,-0.5068,0.3854,-0.8059,-0.5578,0.1984,-0.8581,-0.5121,-0.0381,-0.8614,-0.4595,-0.2163,-0.7983,-0.5262,-0.2929,-0.6154,-0.5534,-0.5613,-0.5825,-0.4031,-0.7058,-0.5091,-0.1554,-0.8466,-0.4028,-0.0233,-0.9150,-0.2275,-0.2061,-0.9517,-0.0710,-0.3216,0.9442,-0.1913,-0.0619,0.9796,-0.4473,-0.1292,0.8850,-0.7603,-0.2918,0.5802,-0.8769,-0.2647,0.4012,-0.8441,-0.2637,0.4669,-0.8866,-0.3667,0.2818,-0.9001,-0.4306,-0.0666,-0.9030,-0.3861,-0.1882,-0.9261,-0.2990,-0.2300,-0.7602,-0.3935,-0.5169,-0.5761,-0.3031,-0.7591,-0.4518,-0.2362,-0.8603,-0.3524,-0.2115,-0.9116,-0.1201,-0.3845,-0.9153,-0.2155,0.0282,0.9761,-0.4350,-0.0863,0.8962,-0.4827,0.0572,0.8739,-0.7069,-0.0101,0.7072,-0.8839,-0.1092,0.4546,-0.9003,-0.1174,0.4191,-0.9130,-0.1808,0.3656,-0.9743,-0.2249,0.0111,-0.9403,-0.1930,-0.2803,-0.9635,-0.0894,-0.2522,-0.8699,-0.0114,-0.4931,-0.6998,-0.2664,-0.6628,-0.4172,-0.3703,-0.8299,-0.4196,-0.1121,-0.9007,-0.2385,0.3047,-0.9221,-0.0442,-0.5269,0.8488,-0.4596,-0.2347,0.8565,-0.5439,-0.0045,0.8391,-0.7659,0.1719,0.6195,-0.8770,-0.0648,0.4760,-0.8853,-0.1567,0.4378,-0.9397,-0.0332,0.3403,-0.9929,0.0645,0.1002,-0.9556,0.0528,-0.2898,-0.9377,0.0158,-0.3471,-0.9109,0.0422,-0.4105,-0.8066,0.0021,-0.5910,-0.3792,-0.2914,-0.8782,-0.3236,-0.2850,-0.9022,-0.3279,0.1547,-0.9319,-0.0911,0.4852,0.8696,-0.3513,0.2173,0.9107,-0.4543,0.1931,0.8697,-0.7234,0.0998,0.6831,-0.8242,0.1552,0.5446,-0.9208,0.0033,0.3898,-0.9583,0.1776,0.2237,-0.9517,0.2868,-0.1098,-0.9167,0.3106,-0.2513,-0.9193,0.3153,-0.2354,-0.8637,0.1156,-0.4906,-0.7548,0.1812,-0.6304,-0.6116,0.2196,-0.7601,-0.2501,0.1052,-0.9625,-0.0245,0.0529,-0.9983,-0.1539,0.9596,0.2354,-0.1612,0.3312,0.9297,-0.4010,0.3335,0.8532,-0.6736,0.4045,0.6185,-0.7556,0.4062,0.5137,-0.7938,0.4029,0.4555,-0.9051,0.3520,0.2385,-0.9453,0.2946,-0.1397,-0.8954,0.3363,-0.2917,-0.8776,0.4180,-0.2347,-0.8173,0.3759,-0.4366,-0.5315,0.4506,-0.7172,-0.3464,0.5641,-0.7495,-0.0700,0.6747,-0.7348,0.0190,0.4659,-0.8846,-0.2707,0.1422,0.9521,-0.2635,0.0934,0.9601,-0.4639,0.2845,0.8389,-0.6671,0.4280,0.6097,-0.7514,0.3664,0.5487,-0.7980,0.3708,0.4751,-0.8800,0.4346,0.1914,-0.8690,0.4585,-0.1858,-0.8832,0.3411,-0.3219,-0.8686,0.3793,-0.3187,-0.6926,0.4295,-0.5795,-0.4299,0.4253,-0.7964,-0.3716,0.5403,-0.7549,-0.5121,0.1993,-0.8354,-0.3046,-0.2659,-0.9146,0.7866,0.1552,0.5976,-0.3027,0.1842,0.9351,-0.4143,0.4403,0.7965,-0.5201,0.5554,0.6489,-0.5171,0.5150,0.6836,-0.5915,0.5850,0.5549,-0.6669,0.7011,0.2525,-0.7515,0.6456,-0.1356,-0.7364,0.6187,-0.2737,-0.7663,0.5540,-0.3253,-0.5304,0.6295,-0.5677,-0.4150,0.4222,-0.8059,-0.4154,0.2956,-0.8603,-0.3955,0.0614,-0.9164,0.4388,0.2046,-0.8749,0.6407,0.7563,0.1324,0.4956,0.5409,0.6795,-0.3350,0.5569,0.7600,-0.4546,0.5755,0.6797,-0.4657,0.6398,0.6113,-0.4028,0.8274,0.3912,-0.2788,0.9343,0.2222,-0.4136,0.9090,-0.0516,-0.4913,0.8463,-0.2058,-0.4604,0.8143,-0.3535,-0.2888,0.7155,-0.6360,-0.3584,0.5897,-0.7237,-0.4823,0.4915,-0.7251,-0.5225,0.1747,-0.8345,-0.4593,0.7023,0.5438,-0.7173,0.3568,0.5985,0.1307,0.4272,0.8947,0.0182,0.5941,0.8041,-0.2701,0.6272,0.7305,-0.4963,0.7645,0.4113,-0.4225,0.8716,0.2486,-0.3451,0.9196,0.1877,-0.2971,0.9502,0.0938,-0.3681,0.9106,-0.1878,-0.3711,0.8253,-0.4255,-0.4380,0.6823,-0.5853,-0.3496,0.6507,-0.6740,-0.3015,0.4082,-0.8616,-0.5758,0.0919,-0.8124,-0.8834,-0.0990,-0.4579,-0.1555,0.3278,0.9319,-0.0260,0.5087,0.8606,0.0678,0.5175,0.8530,-0.1805,0.6344,0.7516,-0.2461,0.8036,0.5419,-0.2717,0.9382,0.2144,-0.3248,0.9308,0.1675,-0.1899,0.9781,0.0856,-0.2585,0.9379,-0.2312,-0.1306,0.9119,-0.3890,-0.2204,0.8364,-0.5018,-0.2664,0.6944,-0.6685,-0.0492,0.5102,-0.8586,-0.0349,0.4858,-0.8734,0.3685,0.2995,-0.8800,0.0454,0.9457,-0.3218,-0.0064,0.8831,-0.4690,-0.0339,0.6218,-0.7825,0.1361,0.4512,-0.8820,0.7011,0.3225,-0.6360
]);

let triangles = new Uint16Array([
    3,2,12,3,12,13,479,478,20,479,20,21,4,3,13,4,13,14,9,479,21,9,21,22,5,4,14,5,14,15,480,9,22,480,22,23,6,5,15,6,15,16,481,480,23,481,23,24,7,6,16,7,16,17,0,296,10,205,481,24,8,7,17,8,17,18,1,0,10,1,10,11,477,8,18,477,18,19,2,1,11,2,11,12,478,477,19,478,19,20,19,18,33,19,33,34,12,11,26,12,26,27,20,19,34,20,34,35,13,12,27,13,27,28,21,20,35,21,35,36,14,13,28,14,28,29,22,21,36,22,36,37,15,14,29,15,29,30,23,22,37,23,37,38,16,15,30,16,30,31,24,23,38,24,38,39,17,16,31,17,31,32,10,296,25,205,24,39,18,17,32,18,32,33,11,10,25,11,25,26,38,37,52,38,52,53,31,30,45,31,45,46,39,38,53,39,53,54,32,31,46,32,46,47,25,296,40,205,39,54,33,32,47,33,47,48,26,25,40,26,40,41,34,33,48,34,48,49,27,26,41,27,41,42,35,34,49,35,49,50,28,27,42,28,42,43,36,35,50,36,50,51,29,28,43,29,43,44,37,36,51,37,51,52,30,29,44,30,44,45,50,49,64,50,64,65,43,42,57,43,57,58,51,50,65,51,65,66,44,43,58,44,58,59,52,51,66,52,66,67,45,44,59,45,59,60,53,52,67,53,67,68,46,45,60,46,60,61,54,53,68,54,68,69,47,46,61,47,61,62,40,296,55,205,54,69,48,47,62,48,62,63,41,40,55,41,55,56,49,48,63,49,63,64,42,41,56,42,56,57,69,68,83,69,83,84,62,61,76,62,76,77,55,296,70,205,69,84,63,62,77,63,77,78,56,55,70,56,70,71,64,63,78,64,78,79,57,56,71,57,71,72,65,64,79,65,79,80,58,57,72,58,72,73,66,65,80,66,80,81,59,58,73,59,73,74,67,66,81,67,81,82,60,59,74,60,74,75,68,67,82,68,82,83,61,60,75,61,75,76,73,72,87,73,87,88,81,80,95,81,95,96,74,73,88,74,88,89,82,81,96,82,96,97,75,74,89,75,89,90,83,82,97,83,97,98,76,75,90,76,90,91,84,83,98,84,98,99,77,76,91,77,91,92,70,296,85,205,84,99,78,77,92,78,92,93,71,70,85,71,85,86,79,78,93,79,93,94,72,71,86,72,86,87,80,79,94,80,94,95,92,91,106,92,106,107,85,296,100,205,99,114,93,92,107,93,107,108,86,85,100,86,100,101,94,93,108,94,108,109,87,86,101,87,101,102,95,94,109,95,109,110,88,87,102,88,102,103,96,95,110,96,110,111,89,88,103,89,103,104,97,96,111,97,111,112,90,89,104,90,104,105,98,97,112,98,112,113,91,90,105,91,105,106,99,98,113,99,113,114,111,110,125,111,125,126,104,103,118,104,118,119,112,111,126,112,126,127,105,104,119,105,119,120,113,112,127,113,127,128,106,105,120,106,120,121,114,113,128,114,128,129,107,106,121,107,121,122,100,296,115,205,114,129,108,107,122,108,122,123,101,100,115,101,115,116,109,108,123,109,123,124,102,101,116,102,116,117,110,109,124,110,124,125,103,102,117,103,117,118,115,296,130,205,129,144,123,122,137,123,137,138,116,115,130,116,130,131,124,123,138,124,138,139,117,116,131,117,131,132,125,124,139,125,139,140,118,117,132,118,132,133,126,125,140,126,140,141,119,118,133,119,133,134,127,126,141,127,141,142,120,119,134,120,134,135,128,127,142,128,142,143,121,120,135,121,135,136,129,128,143,129,143,144,122,121,136,122,136,137,134,133,148,134,148,149,142,141,156,142,156,157,135,134,149,135,149,150,143,142,157,143,157,158,136,135,150,136,150,151,144,143,158,144,158,159,137,136,151,137,151,152,130,296,145,205,144,159,138,137,152,138,152,153,131,130,145,131,145,146,139,138,153,139,153,154,132,131,146,132,146,147,140,139,154,140,154,155,133,132,147,133,147,148,141,140,155,141,155,156,153,152,167,153,167,168,146,145,160,146,160,161,154,153,168,154,168,169,147,146,161,147,161,162,155,154,169,155,169,170,148,147,162,148,162,163,156,155,170,156,170,171,149,148,163,149,163,164,157,156,171,157,171,172,150,149,164,150,164,165,158,157,172,158,172,173,151,150,165,151,165,166,159,158,173,159,173,174,152,151,166,152,166,167,145,296,160,205,159,174,172,171,186,172,186,187,165,164,179,165,179,180,173,172,187,173,187,188,166,165,180,166,180,181,174,173,188,174,188,189,167,166,181,167,181,182,160,296,175,205,174,189,168,167,182,168,182,183,161,160,175,161,175,176,169,168,183,169,183,184,162,161,176,162,176,177,170,169,184,170,184,185,163,162,177,163,177,178,171,170,185,171,185,186,164,163,178,164,178,179,184,183,198,184,198,199,177,176,191,177,191,192,185,184,199,185,199,200,178,177,192,178,192,193,186,185,200,186,200,201,179,178,193,179,193,194,187,186,201,187,201,202,180,179,194,180,194,195,188,187,202,188,202,203,181,180,195,181,195,196,189,188,203,189,203,204,182,181,196,182,196,197,175,296,190,205,189,204,183,182,197,183,197,198,176,175,190,176,190,191,203,202,218,203,218,219,196,195,211,196,211,212,204,203,219,204,219,220,197,196,212,197,212,213,190,296,206,205,204,220,198,197,213,198,213,214,191,190,206,191,206,207,199,198,214,199,214,215,192,191,207,192,207,208,200,199,215,200,215,216,193,192,208,193,208,209,201,200,216,201,216,217,194,193,209,194,209,210,202,201,217,202,217,218,195,194,210,195,210,211,208,207,222,208,222,223,216,215,230,216,230,231,209,208,223,209,223,224,217,216,231,217,231,232,210,209,224,210,224,225,218,217,232,218,232,233,211,210,225,211,225,226,219,218,233,219,233,234,212,211,226,212,226,227,220,219,234,220,234,235,213,212,227,213,227,228,206,296,221,205,220,235,214,213,228,214,228,229,207,206,221,207,221,222,215,214,229,215,229,230,227,226,241,227,241,242,235,234,249,235,249,250,228,227,242,228,242,243,221,296,236,205,235,250,229,228,243,229,243,244,222,221,236,222,236,237,230,229,244,230,244,245,223,222,237,223,237,238,231,230,245,231,245,246,224,223,238,224,238,239,232,231,246,232,246,247,225,224,239,225,239,240,233,232,247,233,247,248,226,225,240,226,240,241,234,233,248,234,248,249,246,245,260,246,260,261,239,238,253,239,253,254,247,246,261,247,261,262,240,239,254,240,254,255,248,247,262,248,262,263,241,240,255,241,255,256,249,248,263,249,263,264,242,241,256,242,256,257,250,249,264,250,264,265,243,242,257,243,257,258,236,296,251,205,250,265,244,243,258,244,258,259,237,236,251,237,251,252,245,244,259,245,259,260,238,237,252,238,252,253,265,264,279,265,279,280,258,257,272,258,272,273,251,296,266,205,265,280,259,258,273,259,273,274,252,251,266,252,266,267,260,259,274,260,274,275,253,252,267,253,267,268,261,260,275,261,275,276,254,253,268,254,268,269,262,261,276,262,276,277,255,254,269,255,269,270,263,262,277,263,277,278,256,255,270,256,270,271,264,263,278,264,278,279,257,256,271,257,271,272,269,268,283,269,283,284,277,276,291,277,291,292,270,269,284,270,284,285,278,277,292,278,292,293,271,270,285,271,285,286,279,278,293,279,293,294,272,271,286,272,286,287,280,279,294,280,294,295,273,272,287,273,287,288,266,296,281,205,280,295,274,273,288,274,288,289,267,266,281,267,281,282,275,274,289,275,289,290,268,267,282,268,282,283,276,275,290,276,290,291,288,287,303,288,303,304,281,296,297,205,295,311,289,288,304,289,304,305,282,281,297,282,297,298,290,289,305,290,305,306,283,282,298,283,298,299,291,290,306,291,306,307,284,283,299,284,299,300,292,291,307,292,307,308,285,284,300,285,300,301,293,292,308,293,308,309,286,285,301,286,301,302,294,293,309,294,309,310,287,286,302,287,302,303,295,294,310,295,310,311,308,307,322,308,322,323,301,300,315,301,315,316,309,308,323,309,323,324,302,301,316,302,316,317,310,309,324,310,324,325,303,302,317,303,317,318,311,310,325,311,325,326,304,303,318,304,318,319,297,296,312,205,311,326,305,304,319,305,319,320,298,297,312,298,312,313,306,305,320,306,320,321,299,298,313,299,313,314,307,306,321,307,321,322,300,299,314,300,314,315,205,326,341,320,319,334,320,334,335,313,312,327,313,327,328,321,320,335,321,335,336,314,313,328,314,328,329,322,321,336,322,336,337,315,314,329,315,329,330,323,322,337,323,337,338,316,315,330,316,330,331,324,323,338,324,338,339,317,316,331,317,331,332,325,324,339,325,339,340,318,317,332,318,332,333,326,325,340,326,340,341,319,318,333,319,333,334,312,296,327,339,338,353,339,353,354,332,331,346,332,346,347,340,339,354,340,354,355,333,332,347,333,347,348,341,340,355,341,355,356,334,333,348,334,348,349,327,296,342,205,341,356,335,334,349,335,349,350,328,327,342,328,342,343,336,335,350,336,350,351,329,328,343,329,343,344,337,336,351,337,351,352,330,329,344,330,344,345,338,337,352,338,352,353,331,330,345,331,345,346,343,342,357,343,357,358,351,350,365,351,365,366,344,343,358,344,358,359,352,351,366,352,366,367,345,344,359,345,359,360,353,352,367,353,367,368,346,345,360,346,360,361,354,353,368,354,368,369,347,346,361,347,361,362,355,354,369,355,369,370,348,347,362,348,362,363,356,355,370,356,370,371,349,348,363,349,363,364,342,296,357,205,356,371,350,349,364,350,364,365,362,361,376,362,376,377,370,369,384,370,384,385,363,362,377,363,377,378,371,370,385,371,385,386,364,363,378,364,378,379,357,296,372,205,371,386,365,364,379,365,379,380,358,357,372,358,372,373,366,365,380,366,380,381,359,358,373,359,373,374,367,366,381,367,381,382,360,359,374,360,374,375,368,367,382,368,382,383,361,360,375,361,375,376,369,368,383,369,383,384,381,380,395,381,395,396,374,373,388,374,388,389,382,381,396,382,396,397,375,374,389,375,389,390,383,382,397,383,397,398,376,375,390,376,390,391,384,383,398,384,398,399,377,376,391,377,391,392,385,384,399,385,399,400,378,377,392,378,392,393,386,385,400,386,400,401,379,378,393,379,393,394,372,296,387,205,386,401,380,379,394,380,394,395,373,372,387,373,387,388,400,399,414,400,414,415,393,392,407,393,407,408,401,400,415,401,415,416,394,393,408,394,408,409,387,296,402,205,401,416,395,394,409,395,409,410,388,387,402,388,402,403,396,395,410,396,410,411,389,388,403,389,403,404,397,396,411,397,411,412,390,389,404,390,404,405,398,397,412,398,412,413,391,390,405,391,405,406,399,398,413,399,413,414,392,391,406,392,406,407,404,403,418,404,418,419,412,411,426,412,426,427,405,404,419,405,419,420,413,412,427,413,427,428,406,405,420,406,420,421,414,413,428,414,428,429,407,406,421,407,421,422,415,414,429,415,429,430,408,407,422,408,422,423,416,415,430,416,430,431,409,408,423,409,423,424,402,296,417,205,416,431,410,409,424,410,424,425,403,402,417,403,417,418,411,410,425,411,425,426,423,422,437,423,437,438,431,430,445,431,445,446,424,423,438,424,438,439,417,296,432,205,431,446,425,424,439,425,439,440,418,417,432,418,432,433,426,425,440,426,440,441,419,418,433,419,433,434,427,426,441,427,441,442,420,419,434,420,434,435,428,427,442,428,442,443,421,420,435,421,435,436,429,428,443,429,443,444,422,421,436,422,436,437,430,429,444,430,444,445,442,441,456,442,456,457,435,434,449,435,449,450,443,442,457,443,457,458,436,435,450,436,450,451,444,443,458,444,458,459,437,436,451,437,451,452,445,444,459,445,459,460,438,437,452,438,452,453,446,445,460,446,460,461,439,438,453,439,453,454,432,296,447,205,446,461,440,439,454,440,454,455,433,432,447,433,447,448,441,440,455,441,455,456,434,433,448,434,448,449,461,460,475,461,475,476,454,453,468,454,468,469,447,296,462,205,461,476,455,454,469,455,469,470,448,447,462,448,462,463,456,455,470,456,470,471,449,448,463,449,463,464,457,456,471,457,471,472,450,449,464,450,464,465,458,457,472,458,472,473,451,450,465,451,465,466,459,458,473,459,473,474,452,451,466,452,466,467,460,459,474,460,474,475,453,452,467,453,467,468,473,472,478,473,478,479,466,465,3,466,3,4,474,473,479,474,479,9,467,466,4,467,4,5,475,474,9,475,9,480,468,467,5,468,5,6,476,475,480,476,480,481,469,468,6,469,6,7,462,296,0,205,476,481,470,469,7,470,7,8,463,462,0,463,0,1,471,470,8,471,8,477,464,463,1,464,1,2,472,471,477,472,477,478,465,464,2,465,2,3
]);

let mirrorPositions = new Float32Array([
    -4, -1, 4,
     4, -1, 4,
    -4, -1, -4,
     4, -1, -4,
]);

let mirrorUvs = new Float32Array([
    0, 1,
    1, 1,
    0, 0,
    1, 0,
]);

let mirrorTriangles = new Uint16Array([
    0, 1, 2,
    2, 1, 3
]);


let skyboxPositions = new Float32Array([
    -1.0, 1.0, 1.0,
    1.0, 1.0, 1.0,
    -1.0, -1.0, 1.0,
    1.0, -1.0, 1.0
]);

let skyboxTriangles = new Uint16Array([
    0, 2, 1,
    2, 3, 1
]);


// language=GLSL
let fragmentShader = `
    #version 300 es
    precision highp float;
    
    uniform samplerCube cubemap;    
        
    in vec3 vNormal;
    in vec3 viewDir;
    
    out vec4 outColor;
    
    void main()
    {        
        vec3 reflectedDir = reflect(viewDir, normalize(vNormal));
        outColor = texture(cubemap, reflectedDir, 5.666);
        
        // Try using a higher mipmap LOD to get a rough material effect without any performance impact 
        //outColor = textureLod(cubemap, reflectedDir, 7.0);
    }
`;

// language=GLSL
let vertexShader = `
    #version 300 es
            
    uniform mat4 modelViewProjectionMatrix;
    uniform mat4 modelMatrix;
    uniform mat3 normalMatrix;
    uniform vec3 cameraPosition; 
    
    layout(location=0) in vec4 position;
    layout(location=1) in vec3 normal;
    layout(location=2) in vec2 uv;
        
    out vec2 vUv;
    out vec3 vNormal;
    out vec3 viewDir;
    
    void main()
    {
        gl_Position = modelViewProjectionMatrix * position;           
        vUv = uv;
        viewDir = (modelMatrix * position).xyz - cameraPosition;                
        vNormal = normalMatrix * normal;
    }
`;

// language=GLSL
let mirrorFragmentShader = `
    #version 300 es
    precision highp float;
    
    uniform sampler2D reflectionTex;
    uniform sampler2D distortionMap;
    uniform sampler2D waveMap;
    uniform vec2 screenSize;
    uniform float time;
    
    in vec2 vUv;        
        
    out vec4 outColor;
    
    void main()
    {                        
        vec2 screenPos = gl_FragCoord.xy / screenSize;
        
        // 0.03 is a mirror distortion factor, try making a larger distortion         
        screenPos.x += ((texture(distortionMap, vUv).r - 0.5) * 0.08) + (texture(waveMap, vUv).r - 0.3) * sin(time) * 0.1 /* * sin(time) to add wave effect*/ ;
        outColor = texture(reflectionTex, screenPos);
    }
`;

// language=GLSL
let mirrorVertexShader = `
    #version 300 es
            
    uniform mat4 modelViewProjectionMatrix;
    
    layout(location=0) in vec4 position;   
    layout(location=1) in vec2 uv;
    
    out vec2 vUv;
        
    void main()
    {
        vUv = uv;
        gl_Position = modelViewProjectionMatrix * position;           
    }
`;

// language=GLSL
let skyboxFragmentShader = `
    #version 300 es
    precision mediump float;
    
    uniform samplerCube cubemap;
    uniform mat4 viewProjectionInverse;
    
    in vec4 v_position;
    
    out vec4 outColor;
    
    void main() {
      vec4 t = viewProjectionInverse * v_position;
      outColor = texture(cubemap, normalize(t.xyz / t.w));
    }
`;

// language=GLSL
let skyboxVertexShader = `
    #version 300 es
    
    layout(location=0) in vec4 position;
    out vec4 v_position;
    
    void main() {
      v_position = position;
      gl_Position = position;
    }
`;

let program = app.createProgram(vertexShader.trim(), fragmentShader.trim());
let skyboxProgram = app.createProgram(skyboxVertexShader.trim(), skyboxFragmentShader.trim());
let mirrorProgram = app.createProgram(mirrorVertexShader.trim(), mirrorFragmentShader.trim());

let vertexArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, positions))
    .vertexAttributeBuffer(1, app.createVertexBuffer(PicoGL.FLOAT, 3, normals))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, triangles));

let skyboxArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, skyboxPositions))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, skyboxTriangles));

let mirrorArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, mirrorPositions))
    .vertexAttributeBuffer(1, app.createVertexBuffer(PicoGL.FLOAT, 2, mirrorUvs))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, mirrorTriangles));

// Change the reflection texture resolution to checkout the difference
let reflectionResolutionFactor = 0.3;
let reflectionColorTarget = app.createTexture2D(app.width * reflectionResolutionFactor, app.height * reflectionResolutionFactor, {magFilter: PicoGL.LINEAR});
let reflectionDepthTarget = app.createTexture2D(app.width * reflectionResolutionFactor, app.height * reflectionResolutionFactor, {format: PicoGL.DEPTH_COMPONENT});
let reflectionBuffer = app.createFramebuffer().colorTarget(0, reflectionColorTarget).depthTarget(reflectionDepthTarget);

let projMatrix = mat4.create();
let viewMatrix = mat4.create();
let viewProjMatrix = mat4.create();
let modelMatrix = mat4.create();
let modelViewMatrix = mat4.create();
let modelViewProjectionMatrix = mat4.create();
let rotateXMatrix = mat4.create();
let rotateYMatrix = mat4.create();
let mirrorModelMatrix = mat4.create();
let mirrorModelViewProjectionMatrix = mat4.create();
let skyboxViewProjectionInverse = mat4.create();
let cameraPosition = vec3.create();


loadImages(["images/cubemap.jpg", "images/noise.png", "images/1.jpg"], function (images) {
    let cubemap = app.createCubemap({cross: images[0]});
    let drawCall = app.createDrawCall(program, vertexArray)
        .texture("cubemap", cubemap);

    let skyboxDrawCall = app.createDrawCall(skyboxProgram, skyboxArray)
        .texture("cubemap", cubemap);

    let mirrorDrawCall = app.createDrawCall(mirrorProgram, mirrorArray)
        .texture("reflectionTex", reflectionColorTarget)
        .texture("distortionMap", app.createTexture2D(images[1]))
        .texture("waveMap", app.createTexture2D(images[2]));

    let startTime = new Date().getTime() / 1000;

    function renderReflectionTexture()
    {
        app.drawFramebuffer(reflectionBuffer);
        app.viewport(0, 0, reflectionColorTarget.width, reflectionColorTarget.height);

        app.gl.cullFace(app.gl.FRONT);

        let reflectionMatrix = mat4.calculateSurfaceReflectionMatrix(mat4.create(), mirrorModelMatrix, vec3.up);
        let reflectionViewMatrix = mat4.mul(mat4.create(), viewMatrix, reflectionMatrix);
        let reflectionCameraPosition = vec3.transformMat4(vec3.create(), cameraPosition, reflectionMatrix);
        drawObjects(reflectionCameraPosition, reflectionViewMatrix);

        app.gl.cullFace(app.gl.BACK);
        app.defaultDrawFramebuffer();
        app.defaultViewport();
    }

    function drawObjects(cameraPosition, viewMatrix) {
        mat4.multiply(viewProjMatrix, projMatrix, viewMatrix);

        mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);
        mat4.multiply(modelViewProjectionMatrix, viewProjMatrix, modelMatrix);

        let skyboxView = mat4.clone(viewMatrix);
        mat4.setTranslation(skyboxView, vec3.fromValues(0, 0, 0));
        let skyboxViewProjectionMatrix = mat4.create();
        mat4.mul(skyboxViewProjectionMatrix, projMatrix, skyboxView);
        mat4.invert(skyboxViewProjectionInverse, skyboxViewProjectionMatrix);

        app.clear();

        app.noDepthTest().drawBackfaces();
        skyboxDrawCall.uniform("viewProjectionInverse", skyboxViewProjectionInverse);
        skyboxDrawCall.draw();

        app.depthTest().cullBackfaces();
        drawCall.uniform("modelViewProjectionMatrix", modelViewProjectionMatrix);
        drawCall.uniform("cameraPosition", cameraPosition);
        drawCall.uniform("modelMatrix", modelMatrix);
        drawCall.uniform("normalMatrix", mat3.normalFromMat4(mat3.create(), modelMatrix));
        drawCall.draw();
    }

    function drawMirror() {
        let time = new Date().getTime() / 1000 - startTime;
        mat4.multiply(mirrorModelViewProjectionMatrix, viewProjMatrix, mirrorModelMatrix);
        mirrorDrawCall.uniform("modelViewProjectionMatrix", mirrorModelViewProjectionMatrix);
        mirrorDrawCall.uniform("screenSize", vec2.fromValues(app.width, app.height))
        mirrorDrawCall.uniform("time",time);
        mirrorDrawCall.draw();
    }

    function draw() {
        let time = new Date().getTime() * 0.001;

        mat4.perspective(projMatrix, Math.PI / 2.5, app.width / app.height, 0.1, 100.0);
        vec3.rotateY(cameraPosition, vec3.fromValues(4, 2, 4), vec3.zero, time * 0.5);
        mat4.lookAt(viewMatrix, cameraPosition, vec3.fromValues(2, -1.5, 1), vec3.up);

        mat4.fromXRotation(rotateXMatrix, time * 0.0136 * Math.PI / 4);
        mat4.fromZRotation(rotateYMatrix, time * 0.6235);
        mat4.mul(modelMatrix, rotateXMatrix, rotateYMatrix);

        mat4.fromXRotation(rotateXMatrix, 0.0);
        mat4.fromYRotation(rotateYMatrix, time * 0.6354);
        mat4.mul(mirrorModelMatrix, rotateYMatrix, rotateXMatrix);
        mat4.setTranslation(mirrorModelMatrix, vec3.fromValues(0, -1, 0));

        renderReflectionTexture();
        drawObjects(cameraPosition, viewMatrix);
        drawMirror();

        requestAnimationFrame(draw);
    }

    requestAnimationFrame(draw);
});