// Simple shadow mapping demo
// Home task: combine shadow mapping with texturing

// Cube
let positions = new Float32Array([
    0.0000,0.0000,-1.0000,0.4253,-0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.7236,-0.5257,-0.4472,0.4253,-0.3090,-0.8507,0.8506,0.0000,-0.5257,0.0000,0.0000,-1.0000,-0.1625,-0.5000,-0.8507,-0.5257,0.0000,-0.8507,0.0000,0.0000,-1.0000,-0.5257,0.0000,-0.8507,-0.1625,0.5000,-0.8507,0.0000,0.0000,-1.0000,-0.1625,0.5000,-0.8507,0.4253,0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.8506,0.0000,-0.5257,0.9511,-0.3090,0.0000,-0.2764,-0.8506,-0.4472,0.2629,-0.8090,-0.5257,0.0000,-1.0000,0.0000,-0.8944,0.0000,-0.4472,-0.6882,-0.5000,-0.5257,-0.9511,-0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.6882,0.5000,-0.5257,-0.5878,0.8090,0.0000,0.7236,0.5257,-0.4472,0.2629,0.8090,-0.5257,0.5878,0.8090,0.0000,0.7236,-0.5257,-0.4472,0.9511,-0.3090,0.0000,0.5878,-0.8090,0.0000,-0.2764,-0.8506,-0.4472,0.0000,-1.0000,0.0000,-0.5878,-0.8090,0.0000,-0.8944,0.0000,-0.4472,-0.9511,-0.3090,0.0000,-0.9511,0.3090,0.0000,-0.2764,0.8506,-0.4472,-0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.7236,0.5257,-0.4472,0.5878,0.8090,0.0000,0.9511,0.3090,0.0000,0.2764,-0.8506,0.4472,0.6882,-0.5000,0.5257,0.1625,-0.5000,0.8507,-0.7236,-0.5257,0.4472,-0.2629,-0.8090,0.5257,-0.4253,-0.3090,0.8507,-0.7236,0.5257,0.4472,-0.8506,0.0000,0.5257,-0.4253,0.3090,0.8507,0.2764,0.8506,0.4472,-0.2629,0.8090,0.5257,0.1625,0.5000,0.8507,0.8944,0.0000,0.4472,0.6882,0.5000,0.5257,0.5257,0.0000,0.8507,0.5257,0.0000,0.8507,0.1625,0.5000,0.8507,0.0000,0.0000,1.0000,0.5257,0.0000,0.8507,0.6882,0.5000,0.5257,0.1625,0.5000,0.8507,0.6882,0.5000,0.5257,0.2764,0.8506,0.4472,0.1625,0.5000,0.8507,0.1625,0.5000,0.8507,-0.4253,0.3090,0.8507,0.0000,0.0000,1.0000,0.1625,0.5000,0.8507,-0.2629,0.8090,0.5257,-0.4253,0.3090,0.8507,-0.2629,0.8090,0.5257,-0.7236,0.5257,0.4472,-0.4253,0.3090,0.8507,-0.4253,0.3090,0.8507,-0.4253,-0.3090,0.8507,0.0000,0.0000,1.0000,-0.4253,0.3090,0.8507,-0.8506,0.0000,0.5257,-0.4253,-0.3090,0.8507,-0.8506,0.0000,0.5257,-0.7236,-0.5257,0.4472,-0.4253,-0.3090,0.8507,-0.4253,-0.3090,0.8507,0.1625,-0.5000,0.8507,0.0000,0.0000,1.0000,-0.4253,-0.3090,0.8507,-0.2629,-0.8090,0.5257,0.1625,-0.5000,0.8507,-0.2629,-0.8090,0.5257,0.2764,-0.8506,0.4472,0.1625,-0.5000,0.8507,0.1625,-0.5000,0.8507,0.5257,0.0000,0.8507,0.0000,0.0000,1.0000,0.1625,-0.5000,0.8507,0.6882,-0.5000,0.5257,0.5257,0.0000,0.8507,0.6882,-0.5000,0.5257,0.8944,0.0000,0.4472,0.5257,0.0000,0.8507,0.9511,0.3090,0.0000,0.6882,0.5000,0.5257,0.8944,0.0000,0.4472,0.9511,0.3090,0.0000,0.5878,0.8090,0.0000,0.6882,0.5000,0.5257,0.5878,0.8090,0.0000,0.2764,0.8506,0.4472,0.6882,0.5000,0.5257,0.0000,1.0000,0.0000,-0.2629,0.8090,0.5257,0.2764,0.8506,0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.2629,0.8090,0.5257,-0.5878,0.8090,0.0000,-0.7236,0.5257,0.4472,-0.2629,0.8090,0.5257,-0.9511,0.3090,0.0000,-0.8506,0.0000,0.5257,-0.7236,0.5257,0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.8506,0.0000,0.5257,-0.9511,-0.3090,0.0000,-0.7236,-0.5257,0.4472,-0.8506,0.0000,0.5257,-0.5878,-0.8090,0.0000,-0.2629,-0.8090,0.5257,-0.7236,-0.5257,0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,-0.2629,-0.8090,0.5257,0.0000,-1.0000,0.0000,0.2764,-0.8506,0.4472,-0.2629,-0.8090,0.5257,0.5878,-0.8090,0.0000,0.6882,-0.5000,0.5257,0.2764,-0.8506,0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.6882,-0.5000,0.5257,0.9511,-0.3090,0.0000,0.8944,0.0000,0.4472,0.6882,-0.5000,0.5257,0.5878,0.8090,0.0000,0.0000,1.0000,0.0000,0.2764,0.8506,0.4472,0.5878,0.8090,0.0000,0.2629,0.8090,-0.5257,0.0000,1.0000,0.0000,0.2629,0.8090,-0.5257,-0.2764,0.8506,-0.4472,0.0000,1.0000,0.0000,-0.5878,0.8090,0.0000,-0.9511,0.3090,0.0000,-0.7236,0.5257,0.4472,-0.5878,0.8090,0.0000,-0.6882,0.5000,-0.5257,-0.9511,0.3090,0.0000,-0.6882,0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.9511,0.3090,0.0000,-0.9511,-0.3090,0.0000,-0.5878,-0.8090,0.0000,-0.7236,-0.5257,0.4472,-0.9511,-0.3090,0.0000,-0.6882,-0.5000,-0.5257,-0.5878,-0.8090,0.0000,-0.6882,-0.5000,-0.5257,-0.2764,-0.8506,-0.4472,-0.5878,-0.8090,0.0000,0.0000,-1.0000,0.0000,0.5878,-0.8090,0.0000,0.2764,-0.8506,0.4472,0.0000,-1.0000,0.0000,0.2629,-0.8090,-0.5257,0.5878,-0.8090,0.0000,0.2629,-0.8090,-0.5257,0.7236,-0.5257,-0.4472,0.5878,-0.8090,0.0000,0.9511,-0.3090,0.0000,0.9511,0.3090,0.0000,0.8944,0.0000,0.4472,0.9511,-0.3090,0.0000,0.8506,0.0000,-0.5257,0.9511,0.3090,0.0000,0.8506,0.0000,-0.5257,0.7236,0.5257,-0.4472,0.9511,0.3090,0.0000,0.4253,0.3090,-0.8507,0.2629,0.8090,-0.5257,0.7236,0.5257,-0.4472,0.4253,0.3090,-0.8507,-0.1625,0.5000,-0.8507,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.2764,0.8506,-0.4472,0.2629,0.8090,-0.5257,-0.1625,0.5000,-0.8507,-0.6882,0.5000,-0.5257,-0.2764,0.8506,-0.4472,-0.1625,0.5000,-0.8507,-0.5257,0.0000,-0.8507,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.8944,0.0000,-0.4472,-0.6882,0.5000,-0.5257,-0.5257,0.0000,-0.8507,-0.6882,-0.5000,-0.5257,-0.8944,0.0000,-0.4472,-0.5257,0.0000,-0.8507,-0.1625,-0.5000,-0.8507,-0.6882,-0.5000,-0.5257,-0.1625,-0.5000,-0.8507,-0.2764,-0.8506,-0.4472,-0.6882,-0.5000,-0.5257,0.8506,0.0000,-0.5257,0.4253,0.3090,-0.8507,0.7236,0.5257,-0.4472,0.8506,0.0000,-0.5257,0.4253,-0.3090,-0.8507,0.4253,0.3090,-0.8507,0.4253,-0.3090,-0.8507,0.0000,0.0000,-1.0000,0.4253,0.3090,-0.8507,-0.1625,-0.5000,-0.8507,0.2629,-0.8090,-0.5257,-0.2764,-0.8506,-0.4472,-0.1625,-0.5000,-0.8507,0.4253,-0.3090,-0.8507,0.2629,-0.8090,-0.5257,0.4253,-0.3090,-0.8507,0.7236,-0.5257,-0.4472,0.2629,-0.8090,-0.5257
]);

let normals = new Float32Array([
    0.1024,-0.3151,-0.9435,0.1024,-0.3151,-0.9435,0.1024,-0.3151,-0.9435,0.7002,-0.2680,-0.6617,0.7002,-0.2680,-0.6617,0.7002,-0.2680,-0.6617,-0.2680,-0.1947,-0.9435,-0.2680,-0.1947,-0.9435,-0.2680,-0.1947,-0.9435,-0.2680,0.1947,-0.9435,-0.2680,0.1947,-0.9435,-0.2680,0.1947,-0.9435,0.1024,0.3151,-0.9435,0.1024,0.3151,-0.9435,0.1024,0.3151,-0.9435,0.9050,-0.2680,-0.3304,0.9050,-0.2680,-0.3304,0.9050,-0.2680,-0.3304,0.0247,-0.9435,-0.3304,0.0247,-0.9435,-0.3304,0.0247,-0.9435,-0.3304,-0.8897,-0.3151,-0.3304,-0.8897,-0.3151,-0.3304,-0.8897,-0.3151,-0.3304,-0.5746,0.7488,-0.3304,-0.5746,0.7488,-0.3304,-0.5746,0.7488,-0.3304,0.5346,0.7779,-0.3304,0.5346,0.7779,-0.3304,0.5346,0.7779,-0.3304,0.8026,-0.5831,-0.1256,0.8026,-0.5831,-0.1256,0.8026,-0.5831,-0.1256,-0.3066,-0.9435,-0.1256,-0.3066,-0.9435,-0.1256,-0.3066,-0.9435,-0.1256,-0.9921,0.0000,-0.1256,-0.9921,0.0000,-0.1256,-0.9921,0.0000,-0.1256,-0.3066,0.9435,-0.1256,-0.3066,0.9435,-0.1256,-0.3066,0.9435,-0.1256,0.8026,0.5831,-0.1256,0.8026,0.5831,-0.1256,0.8026,0.5831,-0.1256,0.4089,-0.6284,0.6617,0.4089,-0.6284,0.6617,0.4089,-0.6284,0.6617,-0.4713,-0.5831,0.6617,-0.4713,-0.5831,0.6617,-0.4713,-0.5831,0.6617,-0.7002,0.2680,0.6617,-0.7002,0.2680,0.6617,-0.7002,0.2680,0.6617,0.0385,0.7488,0.6617,0.0385,0.7488,0.6617,0.0385,0.7488,0.6617,0.7240,0.1947,0.6617,0.7240,0.1947,0.6617,0.7240,0.1947,0.6617,0.2680,0.1947,0.9435,0.2680,0.1947,0.9435,0.2680,0.1947,0.9435,0.4911,0.3568,0.7947,0.4911,0.3568,0.7947,0.4911,0.3568,0.7947,0.4089,0.6284,0.6617,0.4089,0.6284,0.6617,0.4089,0.6284,0.6617,-0.1024,0.3151,0.9435,-0.1024,0.3151,0.9435,-0.1024,0.3151,0.9435,-0.1876,0.5773,0.7947,-0.1876,0.5773,0.7947,-0.1876,0.5773,0.7947,-0.4713,0.5831,0.6617,-0.4713,0.5831,0.6617,-0.4713,0.5831,0.6617,-0.3313,0.0000,0.9435,-0.3313,0.0000,0.9435,-0.3313,0.0000,0.9435,-0.6071,0.0000,0.7947,-0.6071,0.0000,0.7947,-0.6071,0.0000,0.7947,-0.7002,-0.2680,0.6617,-0.7002,-0.2680,0.6617,-0.7002,-0.2680,0.6617,-0.1024,-0.3151,0.9435,-0.1024,-0.3151,0.9435,-0.1024,-0.3151,0.9435,-0.1876,-0.5773,0.7947,-0.1876,-0.5773,0.7947,-0.1876,-0.5773,0.7947,0.0385,-0.7488,0.6617,0.0385,-0.7488,0.6617,0.0385,-0.7488,0.6617,0.2680,-0.1947,0.9435,0.2680,-0.1947,0.9435,0.2680,-0.1947,0.9435,0.4911,-0.3568,0.7947,0.4911,-0.3568,0.7947,0.4911,-0.3568,0.7947,0.7240,-0.1947,0.6617,0.7240,-0.1947,0.6617,0.7240,-0.1947,0.6617,0.8897,0.3151,0.3304,0.8897,0.3151,0.3304,0.8897,0.3151,0.3304,0.7947,0.5773,0.1876,0.7947,0.5773,0.1876,0.7947,0.5773,0.1876,0.5746,0.7488,0.3304,0.5746,0.7488,0.3304,0.5746,0.7488,0.3304,-0.0247,0.9435,0.3304,-0.0247,0.9435,0.3304,-0.0247,0.9435,0.3304,-0.3035,0.9342,0.1876,-0.3035,0.9342,0.1876,-0.3035,0.9342,0.1876,-0.5346,0.7779,0.3304,-0.5346,0.7779,0.3304,-0.5346,0.7779,0.3304,-0.9050,0.2680,0.3304,-0.9050,0.2680,0.3304,-0.9050,0.2680,0.3304,-0.9822,0.0000,0.1876,-0.9822,0.0000,0.1876,-0.9822,0.0000,0.1876,-0.9050,-0.2680,0.3304,-0.9050,-0.2680,0.3304,-0.9050,-0.2680,0.3304,-0.5346,-0.7779,0.3304,-0.5346,-0.7779,0.3304,-0.5346,-0.7779,0.3304,-0.3035,-0.9342,0.1876,-0.3035,-0.9342,0.1876,-0.3035,-0.9342,0.1876,-0.0247,-0.9435,0.3304,-0.0247,-0.9435,0.3304,-0.0247,-0.9435,0.3304,0.5746,-0.7488,0.3304,0.5746,-0.7488,0.3304,0.5746,-0.7488,0.3304,0.7947,-0.5773,0.1876,0.7947,-0.5773,0.1876,0.7947,-0.5773,0.1876,0.8897,-0.3151,0.3304,0.8897,-0.3151,0.3304,0.8897,-0.3151,0.3304,0.3066,0.9435,0.1256,0.3066,0.9435,0.1256,0.3066,0.9435,0.1256,0.3035,0.9342,-0.1876,0.3035,0.9342,-0.1876,0.3035,0.9342,-0.1876,0.0247,0.9435,-0.3304,0.0247,0.9435,-0.3304,0.0247,0.9435,-0.3304,-0.8026,0.5831,0.1256,-0.8026,0.5831,0.1256,-0.8026,0.5831,0.1256,-0.7947,0.5773,-0.1876,-0.7947,0.5773,-0.1876,-0.7947,0.5773,-0.1876,-0.8897,0.3151,-0.3304,-0.8897,0.3151,-0.3304,-0.8897,0.3151,-0.3304,-0.8026,-0.5831,0.1256,-0.8026,-0.5831,0.1256,-0.8026,-0.5831,0.1256,-0.7947,-0.5773,-0.1876,-0.7947,-0.5773,-0.1876,-0.7947,-0.5773,-0.1876,-0.5746,-0.7488,-0.3304,-0.5746,-0.7488,-0.3304,-0.5746,-0.7488,-0.3304,0.3066,-0.9435,0.1256,0.3066,-0.9435,0.1256,0.3066,-0.9435,0.1256,0.3035,-0.9342,-0.1876,0.3035,-0.9342,-0.1876,0.3035,-0.9342,-0.1876,0.5346,-0.7779,-0.3304,0.5346,-0.7779,-0.3304,0.5346,-0.7779,-0.3304,0.9921,0.0000,0.1256,0.9921,0.0000,0.1256,0.9921,0.0000,0.1256,0.9822,0.0000,-0.1876,0.9822,0.0000,-0.1876,0.9822,0.0000,-0.1876,0.9050,0.2680,-0.3304,0.9050,0.2680,-0.3304,0.9050,0.2680,-0.3304,0.4713,0.5831,-0.6617,0.4713,0.5831,-0.6617,0.4713,0.5831,-0.6617,0.1876,0.5773,-0.7947,0.1876,0.5773,-0.7947,0.1876,0.5773,-0.7947,-0.0385,0.7488,-0.6617,-0.0385,0.7488,-0.6617,-0.0385,0.7488,-0.6617,-0.4089,0.6284,-0.6617,-0.4089,0.6284,-0.6617,-0.4089,0.6284,-0.6617,-0.4911,0.3568,-0.7947,-0.4911,0.3568,-0.7947,-0.4911,0.3568,-0.7947,-0.7240,0.1947,-0.6617,-0.7240,0.1947,-0.6617,-0.7240,0.1947,-0.6617,-0.7240,-0.1947,-0.6617,-0.7240,-0.1947,-0.6617,-0.7240,-0.1947,-0.6617,-0.4911,-0.3568,-0.7947,-0.4911,-0.3568,-0.7947,-0.4911,-0.3568,-0.7947,-0.4089,-0.6284,-0.6617,-0.4089,-0.6284,-0.6617,-0.4089,-0.6284,-0.6617,0.7002,0.2680,-0.6617,0.7002,0.2680,-0.6617,0.7002,0.2680,-0.6617,0.6071,0.0000,-0.7947,0.6071,0.0000,-0.7947,0.6071,0.0000,-0.7947,0.3313,0.0000,-0.9435,0.3313,0.0000,-0.9435,0.3313,0.0000,-0.9435,-0.0385,-0.7488,-0.6617,-0.0385,-0.7488,-0.6617,-0.0385,-0.7488,-0.6617,0.1876,-0.5773,-0.7947,0.1876,-0.5773,-0.7947,0.1876,-0.5773,-0.7947,0.4713,-0.5831,-0.6617,0.4713,-0.5831,-0.6617,0.4713,-0.5831,-0.6617
]);

let uvs = new Float32Array([
    -0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297,-0.1734,0.2297,0.8266,0.2297,0.8266,1.2297
]);

let triangles = new Uint16Array([
    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239
]);

// language=GLSL
let fragmentShader = `
    #version 300 es    
    precision highp float;    
    precision highp sampler2DShadow;
    
    uniform vec4 baseColor;
    uniform vec4 ambientColor;
    uniform vec3 lightPosition;
    uniform vec3 cameraPosition;    
    uniform sampler2DShadow shadowMap;
    
    in vec3 vPosition;
    in vec3 vNormal;
    in vec4 vPositionFromLight;
    in vec3 vModelPosition;
    out vec4 fragColor;
    
    void main() {
        vec3 shadowCoord = (vPositionFromLight.xyz / vPositionFromLight.w) / 2.0 + 0.5;        
        float shadow = texture(shadowMap, shadowCoord);
        
        vec3 normal = normalize(vNormal);
        vec3 eyeDirection = normalize(cameraPosition - vPosition);
        vec3 lightDirection = normalize(lightPosition - vPosition);        
        vec3 reflectionDirection = reflect(-lightDirection, normal);
        
        float diffuse = max(dot(lightDirection, normal), 0.0) * max(shadow, 0.2);        
        float specular = shadow * pow(max(dot(reflectionDirection, eyeDirection), 0.0), 100.0) * 0.7;
        fragColor = vec4(diffuse * baseColor.rgb + ambientColor.rgb + specular, baseColor.a);
    }
`;

// language=GLSL
let vertexShader = `
    #version 300 es
    
    layout(location=0) in vec4 position;
    layout(location=1) in vec3 normal;
    
    uniform mat4 modelMatrix;
    uniform mat4 modelViewProjectionMatrix;
    uniform mat4 lightModelViewProjectionMatrix;
    
    out vec3 vPosition;
    out vec3 vNormal;
    out vec4 vPositionFromLight;
    out vec3 vModelPosition;
    
    void main() {
        gl_Position = modelViewProjectionMatrix * position;
        vModelPosition = vec3(position);
        vPosition = vec3(modelMatrix * position);
        vNormal = vec3(modelMatrix * vec4(normal, 0.0));
        vPositionFromLight = lightModelViewProjectionMatrix * position;
    }
`;

// language=GLSL
let shadowFragmentShader = `
    #version 300 es
    precision highp float;
    
    out vec4 fragColor;
    
    void main() {
        // Uncomment to see the depth buffer of the shadow map    
        //fragColor = vec4((gl_FragCoord.z - 0.98) * 50.0);    
    }
`;

// language=GLSL
let shadowVertexShader = `
    #version 300 es
    layout(location=0) in vec4 position;
    uniform mat4 lightModelViewProjectionMatrix;
    
    void main() {
        gl_Position = lightModelViewProjectionMatrix * position;
    }
`;

let bgColor = vec4.fromValues(1.0, 0.2, 0.3, 1.0);
let fgColor = vec4.fromValues(1.0, 0.9, 0.5, 1.0);

app.cullBackfaces().depthTest().clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]);

let program = app.createProgram(vertexShader.trim(), fragmentShader.trim());
let shadowProgram = app.createProgram(shadowVertexShader.trim(), shadowFragmentShader.trim());

let vertexArray = app.createVertexArray()
    .vertexAttributeBuffer(0, app.createVertexBuffer(PicoGL.FLOAT, 3, positions))
    .vertexAttributeBuffer(1, app.createVertexBuffer(PicoGL.FLOAT, 3, normals))
    .indexBuffer(app.createIndexBuffer(PicoGL.UNSIGNED_SHORT, 3, triangles));

// Change the shadow texture resolution to checkout the difference
let shadowDepthTarget = app.createTexture2D(512, 512, {
    format: PicoGL.DEPTH_COMPONENT,
    compareMode: PicoGL.COMPARE_REF_TO_TEXTURE,
    magFilter: PicoGL.LINEAR,
});
let shadowBuffer = app.createFramebuffer().depthTarget(shadowDepthTarget);

let time = 0;
let projMatrix = mat4.create();
let viewMatrix = mat4.create();
let viewProjMatrix = mat4.create();
let modelMatrix = mat4.create();
let modelViewProjectionMatrix = mat4.create();
let rotateXMatrix = mat4.create();
let rotateYMatrix = mat4.create();
let lightModelViewProjectionMatrix = mat4.create();

let cameraPosition = vec3.fromValues(0, 2, 4);
var lightPosition = vec3.fromValues(5, 5, 2.5);
var lightViewMatrix = mat4.create();
var lightViewProjMatrix = mat4.create();
mat4.lookAt(lightViewMatrix, lightPosition, vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));


let drawCall = app.createDrawCall(program, vertexArray)
    .uniform("baseColor", fgColor)
    .uniform("ambientColor", vec4.scale(vec4.create(), bgColor, 0.7))
    .uniform("modelMatrix", modelMatrix)
    .uniform("modelViewProjectionMatrix", modelViewProjectionMatrix)
    .uniform("cameraPosition", cameraPosition)
    .uniform("lightPosition", lightPosition)
    .uniform("lightModelViewProjectionMatrix", lightModelViewProjectionMatrix)
    .texture("shadowMap", shadowDepthTarget);

let shadowDrawCall = app.createDrawCall(shadowProgram, vertexArray)
    .uniform("lightModelViewProjectionMatrix", lightModelViewProjectionMatrix);

function renderShadowMap() {
    app.drawFramebuffer(shadowBuffer);
    app.viewport(0, 0, shadowDepthTarget.width, shadowDepthTarget.height);
    app.gl.cullFace(app.gl.FRONT);

    // Change the projection and view matrices to render objects from the point view of light source
    mat4.perspective(projMatrix, Math.PI * 0.1, shadowDepthTarget.width / shadowDepthTarget.height, 0.1, 100.0);
    mat4.multiply(lightViewProjMatrix, projMatrix, lightViewMatrix);

    drawObjects(shadowDrawCall);

    app.gl.cullFace(app.gl.BACK);
    app.defaultDrawFramebuffer();
    app.defaultViewport();
}

function drawObjects(dc) {
    app.clear();

    // Middle object
    mat4.fromXRotation(rotateXMatrix, time * 0.536);
    mat4.fromZRotation(rotateYMatrix, time * 0.633);
    mat4.mul(modelMatrix, rotateXMatrix, rotateYMatrix);
    mat4.scale(modelMatrix, modelMatrix, [0.8, 0.8, 0.8]);

    mat4.multiply(modelViewProjectionMatrix, viewProjMatrix, modelMatrix);
    mat4.multiply(lightModelViewProjectionMatrix, lightViewProjMatrix, modelMatrix);

    dc.draw();

    // Large object
    mat4.fromXRotation(rotateXMatrix, time * 0.1136);
    mat4.fromYRotation(rotateYMatrix, time * 0.1533);
    mat4.mul(modelMatrix, rotateYMatrix, rotateXMatrix);
    mat4.scale(modelMatrix, modelMatrix, [2, 2, 2]);
    mat4.setTranslation(modelMatrix, vec3.fromValues(-2.4, -2.4, -1.2));

    mat4.multiply(modelViewProjectionMatrix, viewProjMatrix, modelMatrix);
    mat4.multiply(lightModelViewProjectionMatrix, lightViewProjMatrix, modelMatrix);

    dc.draw();

    // Small object
    mat4.scale(modelMatrix, modelMatrix, [0.15, 0.15, 0.15]);
    mat4.setTranslation(modelMatrix, vec3.fromValues(0.9, 0.9, 0.6));

    mat4.multiply(modelViewProjectionMatrix, viewProjMatrix, modelMatrix);
    mat4.multiply(lightModelViewProjectionMatrix, lightViewProjMatrix, modelMatrix);

    dc.draw();
}

function draw() {
    time = new Date().getTime() * 0.001;

    mat4.perspective(projMatrix, Math.PI / 2.5, app.width / app.height, 0.1, 100.0);
    mat4.lookAt(viewMatrix, cameraPosition, vec3.fromValues(0, -0.5, 0), vec3.up);
    mat4.multiply(viewProjMatrix, projMatrix, viewMatrix);

    renderShadowMap();
    drawObjects(drawCall);

    requestAnimationFrame(draw);
}
requestAnimationFrame(draw);